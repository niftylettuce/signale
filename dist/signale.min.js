!function(e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).Signale=e()}(function(){var e=function(e){var t;return function(r){return t||e(t={exports:{},parent:r},t.exports),t.exports}},t=e(function(e,t){"use strict";var n=Object.keys||function(e){var t=[];for(var r in e)t.push(r);return t};e.exports=c,qe.inherits=Ue;var o=i({}),a=r({});qe.inherits(c,o);for(var s=n(a.prototype),l=0;l<s.length;l++){var u=s[l];c.prototype[u]||(c.prototype[u]=a.prototype[u])}function c(e){if(!(this instanceof c))return new c(e);o.call(this,e),a.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",f)}function f(){this.allowHalfOpen||this._writableState.ended||ze.nextTick(h,this)}function h(e){e.end()}Object.defineProperty(c.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(c.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),c.prototype._destroy=function(e,t){this.push(null),this.end(),ze.nextTick(t,e)}}),r=e(function(e,r){(function(r,n,i){"use strict";function o(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,r){var n=e.entry;for(e.entry=null;n;){var i=n.callback;t.pendingcb--,i(void 0),n=n.next}t.corkedRequestsFree?t.corkedRequestsFree.next=e:t.corkedRequestsFree=e}(t,e)}}e.exports=d;var a,s=!r.browser&&["v0.10","v0.9."].indexOf(r.version.slice(0,5))>-1?i:ze.nextTick;d.WritableState=p,qe.inherits=Ue;var l,u={deprecate:or},c=Ft.Buffer,f=n.Uint8Array||function(){};function h(){}function p(e,r){a=a||t({}),e=e||{};var n=r instanceof a;this.objectMode=!!e.objectMode,n&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var i=e.highWaterMark,l=e.writableHighWaterMark,u=this.objectMode?16:16384;this.highWaterMark=i||0===i?i:n&&(l||0===l)?l:u,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var c=!1===e.decodeStrings;this.decodeStrings=!c,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var r=e._writableState,n=r.sync,i=r.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(r),t)!function(e,t,r,n,i){--t.pendingcb,r?(ze.nextTick(i,n),ze.nextTick(w,e,t),e._writableState.errorEmitted=!0,e.emit("error",n)):(i(n),e._writableState.errorEmitted=!0,e.emit("error",n),w(e,t))}(e,r,n,t,i);else{var o=v(r);o||r.corked||r.bufferProcessing||!r.bufferedRequest||b(e,r),n?s(y,e,r,o,i):y(e,r,o,i)}}(r,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new o(this)}function d(e){if(a=a||t({}),!(l.call(d,this)||this instanceof a))return new d(e);this._writableState=new p(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),Yt.call(this)}function g(e,t,r,n,i,o,a){t.writelen=n,t.writecb=a,t.writing=!0,t.sync=!0,r?e._writev(i,t.onwrite):e._write(i,o,t.onwrite),t.sync=!1}function y(e,t,r,n){r||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,n(),w(e,t)}function b(e,t){t.bufferProcessing=!0;var r=t.bufferedRequest;if(e._writev&&r&&r.next){var n=t.bufferedRequestCount,i=new Array(n),a=t.corkedRequestsFree;a.entry=r;for(var s=0,l=!0;r;)i[s]=r,r.isBuf||(l=!1),r=r.next,s+=1;i.allBuffers=l,g(e,t,!0,t.length,i,"",a.finish),t.pendingcb++,t.lastBufferedRequest=null,a.next?(t.corkedRequestsFree=a.next,a.next=null):t.corkedRequestsFree=new o(t),t.bufferedRequestCount=0}else{for(;r;){var u=r.chunk,c=r.encoding,f=r.callback;if(g(e,t,!1,t.objectMode?1:u.length,u,c,f),r=r.next,t.bufferedRequestCount--,t.writing)break}null===r&&(t.lastBufferedRequest=null)}t.bufferedRequest=r,t.bufferProcessing=!1}function v(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function m(e,t){e._final(function(r){t.pendingcb--,r&&e.emit("error",r),t.prefinished=!0,e.emit("prefinish"),w(e,t)})}function w(e,t){var r=v(t);return r&&(function(e,t){t.prefinished||t.finalCalled||("function"==typeof e._final?(t.pendingcb++,t.finalCalled=!0,ze.nextTick(m,e,t)):(t.prefinished=!0,e.emit("prefinish")))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"))),r}qe.inherits(d,Yt),p.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(p.prototype,"buffer",{get:u.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(l=Function.prototype[Symbol.hasInstance],Object.defineProperty(d,Symbol.hasInstance,{value:function(e){return!!l.call(this,e)||this===d&&e&&e._writableState instanceof p}})):l=function(e){return e instanceof this},d.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},d.prototype.write=function(e,t,r){var n,i=this._writableState,o=!1,a=!i.objectMode&&(n=e,c.isBuffer(n)||n instanceof f);return a&&!c.isBuffer(e)&&(e=function(e){return c.from(e)}(e)),"function"==typeof t&&(r=t,t=null),a?t="buffer":t||(t=i.defaultEncoding),"function"!=typeof r&&(r=h),i.ended?function(e,t){var r=new Error("write after end");e.emit("error",r),ze.nextTick(t,r)}(this,r):(a||function(e,t,r,n){var i=!0,o=!1;return null===r?o=new TypeError("May not write null values to stream"):"string"==typeof r||void 0===r||t.objectMode||(o=new TypeError("Invalid non-string/buffer chunk")),o&&(e.emit("error",o),ze.nextTick(n,o),i=!1),i}(this,i,e,r))&&(i.pendingcb++,o=function(e,t,r,n,i,o){if(!r){var a=function(e,t,r){return e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=c.from(t,r)),t}(t,n,i);n!==a&&(r=!0,i="buffer",n=a)}var s=t.objectMode?1:n.length;t.length+=s;var l=t.length<t.highWaterMark;if(l||(t.needDrain=!0),t.writing||t.corked){var u=t.lastBufferedRequest;t.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:o,next:null},u?u.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else g(e,t,!1,s,n,i,o);return l}(this,i,a,e,t,r)),o},d.prototype.cork=function(){this._writableState.corked++},d.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||b(this,e))},d.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(d.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),d.prototype._write=function(e,t,r){r(new Error("_write() is not implemented"))},d.prototype._writev=null,d.prototype.end=function(e,t,r){var n=this._writableState;"function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!=e&&this.write(e,t),n.corked&&(n.corked=1,this.uncork()),n.ending||n.finished||function(e,t,r){t.ending=!0,w(e,t),r&&(t.finished?ze.nextTick(r):e.once("finish",r)),t.ended=!0,e.writable=!1}(this,n,r)},Object.defineProperty(d.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),d.prototype.destroy=$t.destroy,d.prototype._undestroy=$t.undestroy,d.prototype._destroy=function(e,t){this.end(),t(e)}}).call(this,Z,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},n({}).setImmediate)}),n=e(function(e,t){(function(e,r){var n=Z.nextTick,i=(Function.prototype.apply,Array.prototype.slice),o={},a=0;function s(e,t){this._id=e,this._clearFn=t}s.prototype.unref=s.prototype.ref=function(){},s.prototype.close=function(){this._clearFn.call(window,this._id)},t.setImmediate="function"==typeof e?e:function(e){var r=a++,s=!(arguments.length<2)&&i.call(arguments,1);return o[r]=!0,n(function(){o[r]&&(s?e.apply(null,s):e.call(null),t.clearImmediate(r))}),r},t.clearImmediate="function"==typeof r?r:function(e){delete o[e]}}).call(this,n({}).setImmediate,n({}).clearImmediate)}),i=e(function(e,r){(function(r,n){"use strict";var i;e.exports=h,h.ReadableState=f,ke.EventEmitter;var o=function(e,t){return e.listeners(t).length},a=Ft.Buffer,s=n.Uint8Array||function(){};qe.inherits=Ue;var l,u=void 0;u=We&&We.debuglog?We.debuglog("stream"):function(){},qe.inherits(h,Yt);var c=["error","close","destroy","pause","resume"];function f(e,r){e=e||{};var n=r instanceof(i=i||t({}));this.objectMode=!!e.objectMode,n&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var o=e.highWaterMark,a=e.readableHighWaterMark,s=this.objectMode?16:16384;this.highWaterMark=o||0===o?o:n&&(a||0===a)?a:s,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new zt,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(l||(l=Ht.StringDecoder),this.decoder=new l(e.encoding),this.encoding=e.encoding)}function h(e){if(i=i||t({}),!(this instanceof h))return new h(e);this._readableState=new f(e,this),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),Yt.call(this)}function p(e,t,r,n,i){var o,l=e._readableState;return null===t?(l.reading=!1,function(e,t){if(!t.ended){if(t.decoder){var r=t.decoder.end();r&&r.length&&(t.buffer.push(r),t.length+=t.objectMode?1:r.length)}t.ended=!0,b(e)}}(e,l)):(i||(o=function(e,t){var r,n;return n=t,a.isBuffer(n)||n instanceof s||"string"==typeof t||void 0===t||e.objectMode||(r=new TypeError("Invalid non-string/buffer chunk")),r}(l,t)),o?e.emit("error",o):l.objectMode||t&&t.length>0?("string"==typeof t||l.objectMode||Object.getPrototypeOf(t)===a.prototype||(t=function(e){return a.from(e)}(t)),n?l.endEmitted?e.emit("error",new Error("stream.unshift() after end event")):d(e,l,t,!0):l.ended?e.emit("error",new Error("stream.push() after EOF")):(l.reading=!1,l.decoder&&!r?(t=l.decoder.write(t),l.objectMode||0!==t.length?d(e,l,t,!1):m(e,l)):d(e,l,t,!1))):n||(l.reading=!1)),function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(l)}function d(e,t,r,n){t.flowing&&0===t.length&&!t.sync?(e.emit("data",r),e.read(0)):(t.length+=t.objectMode?1:r.length,n?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&b(e)),m(e,t)}Object.defineProperty(h.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),h.prototype.destroy=$t.destroy,h.prototype._undestroy=$t.undestroy,h.prototype._destroy=function(e,t){this.push(null),t(e)},h.prototype.push=function(e,t){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof e&&((t=t||n.defaultEncoding)!==n.encoding&&(e=a.from(e,t),t=""),r=!0),p(this,e,t,!1,r)},h.prototype.unshift=function(e){return p(this,e,null,!0,!1)},h.prototype.isPaused=function(){return!1===this._readableState.flowing},h.prototype.setEncoding=function(e){return l||(l=Ht.StringDecoder),this._readableState.decoder=new l(e),this._readableState.encoding=e,this};var g=8388608;function y(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=g?e=g:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function b(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(u("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?ze.nextTick(v,e):v(e))}function v(e){u("emit readable"),e.emit("readable"),E(e)}function m(e,t){t.readingMore||(t.readingMore=!0,ze.nextTick(w,e,t))}function w(e,t){for(var r=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(u("maybeReadMore read 0"),e.read(0),r!==t.length);)r=t.length;t.readingMore=!1}function _(e){u("readable nexttick read 0"),e.read(0)}function S(e,t){t.reading||(u("resume read 0"),e.read(0)),t.resumeScheduled=!1,t.awaitDrain=0,e.emit("resume"),E(e),t.flowing&&!t.reading&&e.read(0)}function E(e){var t=e._readableState;for(u("flow",t.flowing);t.flowing&&null!==e.read(););}function k(e,t){return 0===t.length?null:(t.objectMode?r=t.buffer.shift():!e||e>=t.length?(r=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.head.data:t.buffer.concat(t.length),t.buffer.clear()):r=function(e,t,r){var n;return e<t.head.data.length?(n=t.head.data.slice(0,e),t.head.data=t.head.data.slice(e)):n=e===t.head.data.length?t.shift():r?function(e,t){var r=t.head,n=1,i=r.data;for(e-=i.length;r=r.next;){var o=r.data,a=e>o.length?o.length:e;if(a===o.length?i+=o:i+=o.slice(0,e),0==(e-=a)){a===o.length?(++n,r.next?t.head=r.next:t.head=t.tail=null):(t.head=r,r.data=o.slice(a));break}++n}return t.length-=n,i}(e,t):function(e,t){var r=a.allocUnsafe(e),n=t.head,i=1;for(n.data.copy(r),e-=n.data.length;n=n.next;){var o=n.data,s=e>o.length?o.length:e;if(o.copy(r,r.length-e,0,s),0==(e-=s)){s===o.length?(++i,n.next?t.head=n.next:t.head=t.tail=null):(t.head=n,n.data=o.slice(s));break}++i}return t.length-=i,r}(e,t),n}(e,t.buffer,t.decoder),r);var r}function x(e){var t=e._readableState;if(t.length>0)throw new Error('"endReadable()" called on non-empty stream');t.endEmitted||(t.ended=!0,ze.nextTick(O,t,e))}function O(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function j(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1}h.prototype.read=function(e){u("read",e),e=parseInt(e,10);var t=this._readableState,r=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return u("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?x(this):b(this),null;if(0===(e=y(e,t))&&t.ended)return 0===t.length&&x(this),null;var n,i=t.needReadable;return u("need readable",i),(0===t.length||t.length-e<t.highWaterMark)&&u("length less than watermark",i=!0),t.ended||t.reading?u("reading or ended",i=!1):i&&(u("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=y(r,t))),null===(n=e>0?k(e,t):null)?(t.needReadable=!0,e=0):t.length-=e,0===t.length&&(t.ended||(t.needReadable=!0),r!==e&&t.ended&&x(this)),null!==n&&this.emit("data",n),n},h.prototype._read=function(e){this.emit("error",new Error("_read() is not implemented"))},h.prototype.pipe=function(e,t){var n=this,i=this._readableState;switch(i.pipesCount){case 0:i.pipes=e;break;case 1:i.pipes=[i.pipes,e];break;default:i.pipes.push(e)}i.pipesCount+=1,u("pipe count=%d opts=%j",i.pipesCount,t);var a=t&&!1===t.end||e===r.stdout||e===r.stderr?y:s;function s(){u("onend"),e.end()}i.endEmitted?ze.nextTick(a):n.once("end",a),e.on("unpipe",function t(r,o){u("onunpipe"),r===n&&o&&!1===o.hasUnpiped&&(o.hasUnpiped=!0,u("cleanup"),e.removeListener("close",d),e.removeListener("finish",g),e.removeListener("drain",l),e.removeListener("error",p),e.removeListener("unpipe",t),n.removeListener("end",s),n.removeListener("end",y),n.removeListener("data",h),c=!0,!i.awaitDrain||e._writableState&&!e._writableState.needDrain||l())});var l=function(e){return function(){var t=e._readableState;u("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&o(e,"data")&&(t.flowing=!0,E(e))}}(n);e.on("drain",l);var c=!1,f=!1;function h(t){u("ondata"),f=!1,!1!==e.write(t)||f||((1===i.pipesCount&&i.pipes===e||i.pipesCount>1&&-1!==j(i.pipes,e))&&!c&&(u("false write response, pause",n._readableState.awaitDrain),n._readableState.awaitDrain++,f=!0),n.pause())}function p(t){u("onerror",t),y(),e.removeListener("error",p),0===o(e,"error")&&e.emit("error",t)}function d(){e.removeListener("finish",g),y()}function g(){u("onfinish"),e.removeListener("close",d),y()}function y(){u("unpipe"),n.unpipe(e)}return n.on("data",h),function(e,t,r){if("function"==typeof e.prependListener)return e.prependListener("error",r);e._events&&e._events.error?$e(e._events.error)?e._events.error.unshift(r):e._events.error=[r,e._events.error]:e.on("error",r)}(e,0,p),e.once("close",d),e.once("finish",g),e.emit("pipe",n),i.flowing||(u("pipe resume"),n.resume()),e},h.prototype.unpipe=function(e){var t=this._readableState,r={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes?this:(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,r),this);if(!e){var n=t.pipes,i=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var o=0;o<i;o++)n[o].emit("unpipe",this,r);return this}var a=j(t.pipes,e);return-1===a?this:(t.pipes.splice(a,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,r),this)},h.prototype.on=function(e,t){var r=Yt.prototype.on.call(this,e,t);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var n=this._readableState;n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.emittedReadable=!1,n.reading?n.length&&b(this):ze.nextTick(_,this))}return r},h.prototype.addListener=h.prototype.on,h.prototype.resume=function(){var e=this._readableState;return e.flowing||(u("resume"),e.flowing=!0,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,ze.nextTick(S,e,t))}(this,e)),this},h.prototype.pause=function(){return u("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(u("pause"),this._readableState.flowing=!1,this.emit("pause")),this},h.prototype.wrap=function(e){var t=this,r=this._readableState,n=!1;for(var i in e.on("end",function(){if(u("wrapped end"),r.decoder&&!r.ended){var e=r.decoder.end();e&&e.length&&t.push(e)}t.push(null)}),e.on("data",function(i){u("wrapped data"),r.decoder&&(i=r.decoder.write(i)),(!r.objectMode||null!=i)&&(r.objectMode||i&&i.length)&&(t.push(i)||(n=!0,e.pause()))}),e)void 0===this[i]&&"function"==typeof e[i]&&(this[i]=function(t){return function(){return e[t].apply(e,arguments)}}(i));for(var o=0;o<c.length;o++)e.on(c[o],this.emit.bind(this,c[o]));return this._read=function(t){u("wrapped _read",t),n&&(n=!1,e.resume())},this},Object.defineProperty(h.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),h._fromList=k}).call(this,Z,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})}),o={},a=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var r=[],n=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){i=!0,o=e}finally{try{!n&&s.return&&s.return()}finally{if(i)throw o}}return r}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};function s(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}const l=Object,u=["black","red","green","yellow","blue","magenta","cyan","lightGray","","default"],c=["darkGray","lightRed","lightGreen","lightYellow","lightBlue","lightMagenta","lightCyan","white",""],f=["","bright","dim","italic","underline","","","inverse"],h={red:"lightRed",green:"lightGreen",yellow:"lightYellow",blue:"lightBlue",magenta:"lightMagenta",cyan:"lightCyan",black:"darkGray",lightGray:"white"},p={0:"style",2:"unstyle",3:"color",9:"colorLight",4:"bgColor",10:"bgColorLight"},d={color:u,colorLight:c,bgColor:u,bgColorLight:c,style:f,unstyle:f},g=e=>{for(const t in e)e[t]||delete e[t];return 0===l.keys(e).length?void 0:e};class y{constructor(e,t,r){this.background=e,this.name=t,this.brightness=r}get inverse(){return new y(!this.background,this.name||(this.background?"black":"white"),this.brightness)}get clean(){return g({name:"default"===this.name?"":this.name,bright:this.brightness===b.bright,dim:this.brightness===b.dim})}defaultBrightness(e){return new y(this.background,this.name,this.brightness||e)}css(e){const t=e?this.inverse:this,r=t.brightness===b.bright&&h[t.name]||t.name,n=t.background?"background:":"color:",i=_.rgb[r],o=this.brightness===b.dim?.5:1;return i?n+"rgba("+[].concat(s(i),[o]).join(",")+");":!t.background&&o<1?"color:rgba(0,0,0,0.5);":""}}class b{constructor(e){void 0!==e&&(this.value=Number(e))}get type(){return p[Math.floor(this.value/10)]}get subtype(){return d[this.type][this.value%10]}get str(){return this.value?"["+this.value+"m":""}static str(e){return new b(e).str}get isBrightness(){return this.value===b.noBrightness||this.value===b.bright||this.value===b.dim}}l.assign(b,{bright:1,dim:2,inverse:7,noBrightness:22,noItalic:23,noUnderline:24,noInverse:27,noColor:39,noBgColor:49});const v=(e,t)=>e+t.charAt(0).toUpperCase()+t.slice(1),m=(()=>[].concat(s(u.map((e,t)=>e?[[e,30+t,b.noColor],[v("bg",e),40+t,b.noBgColor]]:[])),s(c.map((e,t)=>e?[[e,90+t,b.noColor],[v("bg",e),100+t,b.noBgColor]]:[])),s(["","BrightRed","BrightGreen","BrightYellow","BrightBlue","BrightMagenta","BrightCyan"].map((e,t)=>e?[["bg"+e,100+t,b.noBgColor]]:[])),s(f.map((e,t)=>e?[[e,t,"bright"===e||"dim"===e?b.noBrightness:20+t]]:[]))).reduce((e,t)=>e.concat(t)))(),w=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e;return m.reduce((e,r)=>{var n=a(r,3);let i=n[0],o=n[1],s=n[2];return l.defineProperty(e,i,{get:()=>w(e=>t(((e,t,r)=>{const n=b.str(t),i=b.str(r);return String(e).split("\n").map(e=>(e=>e.replace(/(\u001b\[(1|2)m)/g,"[22m$1"))(n+((e,t,r)=>e.split(t).join(r))((e=>e.replace(/\u001b\[22m(\u001b\[(1|2)m)/g,"$1"))(e),i,n)+i)).join("\n")})(e,o,s)))})},e)};class _{constructor(e){if(e){const t=/\u001b\[(\d+)m/g,r=e.split(/\u001b\[\d+m/),n=[];for(let r;r=t.exec(e);)n.push(r[1]);this.spans=r.map((e,t)=>({text:e,code:new b(n[t])}))}else this.spans=[]}get str(){return this.spans.reduce((e,t)=>e+t.text+t.code.str,"")}get parsed(){var e=new y,t=new y(!0),r=void 0,n=new Set;return l.assign(new _,{spans:this.spans.map(i=>{const o=i.code,a=n.has("inverse"),s=n.has("underline")?"text-decoration: underline;":"",u=n.has("italic")?"font-style: italic;":"",c=r===b.bright?"font-weight: bold;":"",f=e.defaultBrightness(r),h=l.assign({css:c+u+s+f.css(a)+t.css(a)},g({bold:!!c,color:f.clean,bgColor:t.clean}),i);for(const e of n)h[e]=!0;if(o.isBrightness)r=o.value;else switch(i.code.type){case"color":case"colorLight":e=new y(!1,o.subtype);break;case"bgColor":case"bgColorLight":t=new y(!0,o.subtype);break;case"style":n.add(o.subtype);break;case"unstyle":n.delete(o.subtype)}return h}).filter(e=>e.text.length>0)})}get asChromeConsoleLogArguments(){const e=this.parsed.spans;return[e.map(e=>"%c"+e.text).join("")].concat(s(e.map(e=>e.css)))}get browserConsoleArguments(){return this.asChromeConsoleLogArguments}static get nice(){return _.names.forEach(e=>{e in String.prototype||l.defineProperty(String.prototype,e,{get:function(){return _[e](this)}})}),_}static parse(e){return new _(e).parsed}static strip(e){return e.replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]/g,"")}[Symbol.iterator](){return this.spans[Symbol.iterator]()}}w(_,e=>e),_.names=m.map(e=>a(e,1)[0]),_.rgb={black:[0,0,0],darkGray:[100,100,100],lightGray:[200,200,200],white:[255,255,255],red:[204,0,0],lightRed:[255,51,0],green:[0,204,0],lightGreen:[51,204,51],yellow:[204,102,0],lightYellow:[255,153,51],blue:[0,0,255],lightBlue:[26,140,255],magenta:[204,0,204],lightMagenta:[255,0,255],cyan:[0,153,255],lightCyan:[0,204,255]},o=_;var S=/(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi,E=/(?:^|\.)(\w+)(?:\(([^)]*)\))?/g,k=/^(['"])((?:\\.|(?!\1)[^\\])*)\1$/,x=/\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi,O=new Map([["n","\n"],["r","\r"],["t","\t"],["b","\b"],["f","\f"],["v","\v"],["0","\0"],["\\","\\"],["e",""],["a",""]]);function j(e){return"u"===e[0]&&5===e.length||"x"===e[0]&&3===e.length?String.fromCharCode(parseInt(e.slice(1),16)):O.get(e)||e}function A(e,t){var r,n=[],i=t.trim().split(/\s*,\s*/g),o=!0,a=!1,s=void 0;try{for(var l,u=i[Symbol.iterator]();!(o=(l=u.next()).done);o=!0){var c=l.value;if(isNaN(c)){if(!(r=c.match(k)))throw new Error("Invalid Chalk template style argument: ".concat(c," (in style '").concat(e,"')"));n.push(r[2].replace(x,function(e,t,r){return t?j(t):r}))}else n.push(Number(c))}}catch(e){a=!0,s=e}finally{try{o||null==u.return||u.return()}finally{if(a)throw s}}return n}function M(e,t){var r,n={},i=!0,o=!1,a=void 0;try{for(var s,l=t[Symbol.iterator]();!(i=(s=l.next()).done);i=!0){var u=s.value,c=!0,f=!1,h=void 0;try{for(var p,d=u.styles[Symbol.iterator]();!(c=(p=d.next()).done);c=!0){var g=p.value;n[g[0]]=u.inverse?null:g.slice(1)}}catch(e){f=!0,h=e}finally{try{c||null==d.return||d.return()}finally{if(f)throw h}}}}catch(e){o=!0,a=e}finally{try{i||null==l.return||l.return()}finally{if(o)throw a}}for(var y=e,b=Object.keys(n),v=0;v<b.length;v++){var m=b[v];if(Array.isArray(n[m])){if(!(m in y))throw new Error("Unknown Chalk style: ".concat(m));var w;y=n[m].length>0?(w=y)[m].apply(w,function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(r=n[m])||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(r)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()):y[m]}}return y}var C=function(e,t){var r=[],n=[],i=[];if(t.replace(S,function(t,o,a,s,l,u){if(o)i.push(j(o));else if(s){var c=i.join("");i=[],n.push(0===r.length?c:M(e,r)(c)),r.push({inverse:a,styles:function(e){E.lastIndex=0;for(var t,r=[];null!==(t=E.exec(e));){var n=t[1];if(t[2]){var i=A(n,t[2]);r.push([n].concat(i))}else r.push([n])}return r}(s)})}else if(l){if(0===r.length)throw new Error("Found extraneous } in Chalk template literal");n.push(M(e,r)(i.join(""))),i=[],r.pop()}else i.push(u)}),n.push(i.join("")),r.length>0){var o="Chalk template literal is missing ".concat(r.length," closing bracket").concat(1===r.length?"":"s"," (`}`)");throw new Error(o)}return n.join("")},T={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},L={},B={};for(var R in T)Object.prototype.hasOwnProperty.call(T,R)&&(B[T[R]]=R);var N={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};for(var P in N)if(Object.prototype.hasOwnProperty.call(N,P)){if(!("channels"in N[P]))throw new Error("missing channels property: "+P);if(!("labels"in N[P]))throw new Error("missing channel labels property: "+P);if(N[P].labels.length!==N[P].channels)throw new Error("channel and label counts mismatch: "+P);var I=N[P],F=I.channels,U=I.labels;delete N[P].channels,delete N[P].labels,Object.defineProperty(N[P],"channels",{value:F}),Object.defineProperty(N[P],"labels",{value:U})}function D(e,t){return function(r){return t(e(r))}}function q(e,t){for(var r=[t[e].parent,e],n=L[t[e].parent][e],i=t[e].parent;t[i].parent;)r.unshift(t[i].parent),n=D(L[t[i].parent][i],n),i=t[i].parent;return n.conversion=r,n}N.rgb.hsl=function(e){var t,r=e[0]/255,n=e[1]/255,i=e[2]/255,o=Math.min(r,n,i),a=Math.max(r,n,i),s=a-o;a===o?t=0:r===a?t=(n-i)/s:n===a?t=2+(i-r)/s:i===a&&(t=4+(r-n)/s),(t=Math.min(60*t,360))<0&&(t+=360);var l=(o+a)/2;return[t,100*(a===o?0:l<=.5?s/(a+o):s/(2-a-o)),100*l]},N.rgb.hsv=function(e){var t,r,n,i,o,a=e[0]/255,s=e[1]/255,l=e[2]/255,u=Math.max(a,s,l),c=u-Math.min(a,s,l),f=function(e){return(u-e)/6/c+.5};return 0===c?i=o=0:(o=c/u,t=f(a),r=f(s),n=f(l),a===u?i=n-r:s===u?i=1/3+t-n:l===u&&(i=2/3+r-t),i<0?i+=1:i>1&&(i-=1)),[360*i,100*o,100*u]},N.rgb.hwb=function(e){var t=e[0],r=e[1],n=e[2];return[N.rgb.hsl(e)[0],1/255*Math.min(t,Math.min(r,n))*100,100*(n=1-1/255*Math.max(t,Math.max(r,n)))]},N.rgb.cmyk=function(e){var t=e[0]/255,r=e[1]/255,n=e[2]/255,i=Math.min(1-t,1-r,1-n);return[100*((1-t-i)/(1-i)||0),100*((1-r-i)/(1-i)||0),100*((1-n-i)/(1-i)||0),100*i]},N.rgb.keyword=function(e){var t=B[e];if(t)return t;var r,n,i,o=1/0;for(var a in T)if(Object.prototype.hasOwnProperty.call(T,a)){var s=(n=e,i=T[a],Math.pow(n[0]-i[0],2)+Math.pow(n[1]-i[1],2)+Math.pow(n[2]-i[2],2));s<o&&(o=s,r=a)}return r},N.keyword.rgb=function(e){return T[e]},N.rgb.xyz=function(e){var t=e[0]/255,r=e[1]/255,n=e[2]/255;return[100*(.4124*(t=t>.04045?Math.pow((t+.055)/1.055,2.4):t/12.92)+.3576*(r=r>.04045?Math.pow((r+.055)/1.055,2.4):r/12.92)+.1805*(n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92)),100*(.2126*t+.7152*r+.0722*n),100*(.0193*t+.1192*r+.9505*n)]},N.rgb.lab=function(e){var t=N.rgb.xyz(e),r=t[0],n=t[1],i=t[2];return n/=100,i/=108.883,r=(r/=95.047)>.008856?Math.pow(r,1/3):7.787*r+16/116,[116*(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116)-16,500*(r-n),200*(n-(i=i>.008856?Math.pow(i,1/3):7.787*i+16/116))]},N.hsl.rgb=function(e){var t,r,n,i=e[0]/360,o=e[1]/100,a=e[2]/100;if(0===o)return[n=255*a,n,n];for(var s=2*a-(t=a<.5?a*(1+o):a+o-a*o),l=[0,0,0],u=0;u<3;u++)(r=i+1/3*-(u-1))<0&&r++,r>1&&r--,n=6*r<1?s+6*(t-s)*r:2*r<1?t:3*r<2?s+(t-s)*(2/3-r)*6:s,l[u]=255*n;return l},N.hsl.hsv=function(e){var t=e[0],r=e[1]/100,n=e[2]/100,i=r,o=Math.max(n,.01);return r*=(n*=2)<=1?n:2-n,i*=o<=1?o:2-o,[t,100*(0===n?2*i/(o+i):2*r/(n+r)),(n+r)/2*100]},N.hsv.rgb=function(e){var t=e[0]/60,r=e[1]/100,n=e[2]/100,i=Math.floor(t)%6,o=t-Math.floor(t),a=255*n*(1-r),s=255*n*(1-r*o),l=255*n*(1-r*(1-o));switch(n*=255,i){case 0:return[n,l,a];case 1:return[s,n,a];case 2:return[a,n,l];case 3:return[a,s,n];case 4:return[l,a,n];case 5:return[n,a,s]}},N.hsv.hsl=function(e){var t,r,n=e[0],i=e[1]/100,o=e[2]/100,a=Math.max(o,.01);r=(2-i)*o;var s=(2-i)*a;return t=i*a,[n,100*(t=(t/=s<=1?s:2-s)||0),100*(r/=2)]},N.hwb.rgb=function(e){var t=e[0]/360,r=e[1]/100,n=e[2]/100,i=r+n;i>1&&(r/=i,n/=i);var o=Math.floor(6*t),a=1-n,s=6*t-o;0!=(1&o)&&(s=1-s);var l,u,c,f=r+s*(a-r);switch(o){default:case 6:case 0:l=a,u=f,c=r;break;case 1:l=f,u=a,c=r;break;case 2:l=r,u=a,c=f;break;case 3:l=r,u=f,c=a;break;case 4:l=f,u=r,c=a;break;case 5:l=a,u=r,c=f}return[255*l,255*u,255*c]},N.cmyk.rgb=function(e){var t=e[0]/100,r=e[1]/100,n=e[2]/100,i=e[3]/100;return[255*(1-Math.min(1,t*(1-i)+i)),255*(1-Math.min(1,r*(1-i)+i)),255*(1-Math.min(1,n*(1-i)+i))]},N.xyz.rgb=function(e){var t,r,n,i=e[0]/100,o=e[1]/100,a=e[2]/100;return r=-.9689*i+1.8758*o+.0415*a,n=.0557*i+-.204*o+1.057*a,t=(t=3.2406*i+-1.5372*o+-.4986*a)>.0031308?1.055*Math.pow(t,1/2.4)-.055:12.92*t,r=r>.0031308?1.055*Math.pow(r,1/2.4)-.055:12.92*r,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:12.92*n,[255*(t=Math.min(Math.max(0,t),1)),255*(r=Math.min(Math.max(0,r),1)),255*(n=Math.min(Math.max(0,n),1))]},N.xyz.lab=function(e){var t=e[0],r=e[1],n=e[2];return r/=100,n/=108.883,t=(t/=95.047)>.008856?Math.pow(t,1/3):7.787*t+16/116,[116*(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116)-16,500*(t-r),200*(r-(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116))]},N.lab.xyz=function(e){var t,r,n,i=e[0];t=e[1]/500+(r=(i+16)/116),n=r-e[2]/200;var o=Math.pow(r,3),a=Math.pow(t,3),s=Math.pow(n,3);return r=o>.008856?o:(r-16/116)/7.787,t=a>.008856?a:(t-16/116)/7.787,n=s>.008856?s:(n-16/116)/7.787,[t*=95.047,r*=100,n*=108.883]},N.lab.lch=function(e){var t,r=e[0],n=e[1],i=e[2];return(t=360*Math.atan2(i,n)/2/Math.PI)<0&&(t+=360),[r,Math.sqrt(n*n+i*i),t]},N.lch.lab=function(e){var t=e[0],r=e[1],n=e[2]/360*2*Math.PI;return[t,r*Math.cos(n),r*Math.sin(n)]},N.rgb.ansi16=function(e){var t=e[0],r=e[1],n=e[2],i=1 in arguments?arguments[1]:N.rgb.hsv(e)[2];if(0===(i=Math.round(i/50)))return 30;var o=30+(Math.round(n/255)<<2|Math.round(r/255)<<1|Math.round(t/255));return 2===i&&(o+=60),o},N.hsv.ansi16=function(e){return N.rgb.ansi16(N.hsv.rgb(e),e[2])},N.rgb.ansi256=function(e){var t=e[0],r=e[1],n=e[2];return t===r&&r===n?t<8?16:t>248?231:Math.round((t-8)/247*24)+232:16+36*Math.round(t/255*5)+6*Math.round(r/255*5)+Math.round(n/255*5)},N.ansi16.rgb=function(e){var t=e%10;if(0===t||7===t)return e>50&&(t+=3.5),[t=t/10.5*255,t,t];var r=.5*(1+~~(e>50));return[(1&t)*r*255,(t>>1&1)*r*255,(t>>2&1)*r*255]},N.ansi256.rgb=function(e){if(e>=232){var t=10*(e-232)+8;return[t,t,t]}var r;return e-=16,[Math.floor(e/36)/5*255,Math.floor((r=e%36)/6)/5*255,r%6/5*255]},N.rgb.hex=function(e){var t=(((255&Math.round(e[0]))<<16)+((255&Math.round(e[1]))<<8)+Number(255&Math.round(e[2]))).toString(16).toUpperCase();return"000000".substring(t.length)+t},N.hex.rgb=function(e){var t=e.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!t)return[0,0,0];var r=t[0];3===t[0].length&&(r=r.split("").map(function(e){return e+e}).join(""));var n=parseInt(r,16);return[n>>16&255,n>>8&255,255&n]},N.rgb.hcg=function(e){var t,r=e[0]/255,n=e[1]/255,i=e[2]/255,o=Math.max(Math.max(r,n),i),a=Math.min(Math.min(r,n),i),s=o-a;return t=s<=0?0:o===r?(n-i)/s%6:o===n?2+(i-r)/s:4+(r-n)/s+4,t/=6,[360*(t%=1),100*s,100*(s<1?a/(1-s):0)]},N.hsl.hcg=function(e){var t,r=e[1]/100,n=e[2]/100,i=0;return(t=n<.5?2*r*n:2*r*(1-n))<1&&(i=(n-.5*t)/(1-t)),[e[0],100*t,100*i]},N.hsv.hcg=function(e){var t=e[1]/100,r=e[2]/100,n=t*r,i=0;return n<1&&(i=(r-n)/(1-n)),[e[0],100*n,100*i]},N.hcg.rgb=function(e){var t=e[0]/360,r=e[1]/100,n=e[2]/100;if(0===r)return[255*n,255*n,255*n];var i,o=[0,0,0],a=t%1*6,s=a%1,l=1-s;switch(Math.floor(a)){case 0:o[0]=1,o[1]=s,o[2]=0;break;case 1:o[0]=l,o[1]=1,o[2]=0;break;case 2:o[0]=0,o[1]=1,o[2]=s;break;case 3:o[0]=0,o[1]=l,o[2]=1;break;case 4:o[0]=s,o[1]=0,o[2]=1;break;default:o[0]=1,o[1]=0,o[2]=l}return i=(1-r)*n,[255*(r*o[0]+i),255*(r*o[1]+i),255*(r*o[2]+i)]},N.hcg.hsv=function(e){var t=e[1]/100,r=t+e[2]/100*(1-t),n=0;return r>0&&(n=t/r),[e[0],100*n,100*r]},N.hcg.hsl=function(e){var t=e[1]/100,r=e[2]/100*(1-t)+.5*t,n=0;return r>0&&r<.5?n=t/(2*r):r>=.5&&r<1&&(n=t/(2*(1-r))),[e[0],100*n,100*r]},N.hcg.hwb=function(e){var t=e[1]/100,r=t+e[2]/100*(1-t);return[e[0],100*(r-t),100*(1-r)]},N.hwb.hcg=function(e){var t=e[1]/100,r=1-e[2]/100,n=r-t,i=0;return n<1&&(i=(r-n)/(1-n)),[e[0],100*n,100*i]},N.apple.rgb=function(e){return[e[0]/65535*255,e[1]/65535*255,e[2]/65535*255]},N.rgb.apple=function(e){return[e[0]/255*65535,e[1]/255*65535,e[2]/255*65535]},N.gray.rgb=function(e){return[e[0]/100*255,e[0]/100*255,e[0]/100*255]},N.gray.hsv=function(e){return[0,0,e[0]]},N.gray.hsl=N.gray.hsv,N.gray.hwb=function(e){return[0,100,e[0]]},N.gray.cmyk=function(e){return[0,0,0,e[0]]},N.gray.lab=function(e){return[e[0],0,0]},N.gray.hex=function(e){var t=255&Math.round(e[0]/100*255),r=((t<<16)+(t<<8)+t).toString(16).toUpperCase();return"000000".substring(r.length)+r},N.rgb.gray=function(e){return[(e[0]+e[1]+e[2])/3/255*100]},L=N;var z,W={};Object.keys(L).forEach(function(e){W[e]={},Object.defineProperty(W[e],"channels",{value:L[e].channels}),Object.defineProperty(W[e],"labels",{value:L[e].labels});var t=function(e){for(var t=function(e){var t=function(){for(var e={},t=Object.keys(L),r=t.length,n=0;n<r;n++)e[t[n]]={distance:-1,parent:null};return e}(),r=[e];for(t[e].distance=0;r.length;)for(var n=r.pop(),i=Object.keys(L[n]),o=i.length,a=0;a<o;a++){var s=i[a],l=t[s];-1===l.distance&&(l.distance=t[n].distance+1,l.parent=n,r.unshift(s))}return t}(e),r={},n=Object.keys(t),i=n.length,o=0;o<i;o++){var a=n[o];null!==t[a].parent&&(r[a]=q(a,t))}return r}(e);Object.keys(t).forEach(function(r){var n=t[r];W[e][r]=function(e){var t=function(t){if(null==t)return t;arguments.length>1&&(t=Array.prototype.slice.call(arguments));var r=e(t);if("object"==typeof r)for(var n=r.length,i=0;i<n;i++)r[i]=Math.round(r[i]);return r};return"conversion"in e&&(t.conversion=e.conversion),t}(n),W[e][r].raw=function(e){var t=function(t){return null==t?t:(arguments.length>1&&(t=Array.prototype.slice.call(arguments)),e(t))};return"conversion"in e&&(t.conversion=e.conversion),t}(n)})}),z=W;var G={exports:{}},$=function(e,t){return function(){for(var r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];var o=e.apply(z,n);return"[".concat(o+t,"m")}},Y=function(e,t){return function(){for(var r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];var o=e.apply(z,n);return"[".concat(38+t,";5;").concat(o,"m")}},H=function(e,t){return function(){for(var r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];var o=e.apply(z,n);return"[".concat(38+t,";2;").concat(o[0],";").concat(o[1],";").concat(o[2],"m")}};Object.defineProperty(G,"exports",{enumerable:!0,get:function(){var e=new Map,t={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],gray:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};t.color.grey=t.color.gray;for(var r=Object.keys(t),n=0;n<r.length;n++){for(var i=r[n],o=t[i],a=Object.keys(o),s=0;s<a.length;s++){var l=a[s],u=o[l];t[l]={open:"[".concat(u[0],"m"),close:"[".concat(u[1],"m")},o[l]=t[l],e.set(u[0],u[1])}Object.defineProperty(t,i,{value:o,enumerable:!1}),Object.defineProperty(t,"codes",{value:e,enumerable:!1})}var c=function(e){return e},f=function(e,t,r){return[e,t,r]};t.color.close="[39m",t.bgColor.close="[49m",t.color.ansi={ansi:$(c,0)},t.color.ansi256={ansi256:Y(c,0)},t.color.ansi16m={rgb:H(f,0)},t.bgColor.ansi={ansi:$(c,10)},t.bgColor.ansi256={ansi256:Y(c,10)},t.bgColor.ansi16m={rgb:H(f,10)};for(var h=Object.keys(z),p=0;p<h.length;p++){var d=h[p];if("object"==typeof z[d]){var g=z[d];"ansi16"===d&&(d="ansi"),"ansi16"in g&&(t.color.ansi[d]=$(g.ansi16,0),t.bgColor.ansi[d]=$(g.ansi16,10)),"ansi256"in g&&(t.color.ansi256[d]=Y(g.ansi256,0),t.bgColor.ansi256[d]=Y(g.ansi256,10)),"rgb"in g&&(t.color.ansi16m[d]=H(g.rgb,0),t.bgColor.ansi16m[d]=H(g.rgb,10))}}return t}}),G=G.exports;var J,K,Q=/[|\\{}()[\]^$+*?.]/g,V=function(e){if("string"!=typeof e)throw new TypeError("Expected a string");return e.replace(Q,"\\$&")},Z={},X=Z={};function ee(){throw new Error("setTimeout has not been defined")}function te(){throw new Error("clearTimeout has not been defined")}function re(e){if(J===setTimeout)return setTimeout(e,0);if((J===ee||!J)&&setTimeout)return J=setTimeout,setTimeout(e,0);try{return J(e,0)}catch(t){try{return J.call(null,e,0)}catch(t){return J.call(this,e,0)}}}!function(){try{J="function"==typeof setTimeout?setTimeout:ee}catch(e){J=ee}try{K="function"==typeof clearTimeout?clearTimeout:te}catch(e){K=te}}();var ne,ie=[],oe=!1,ae=-1;function se(){oe&&ne&&(oe=!1,ne.length?ie=ne.concat(ie):ae=-1,ie.length&&le())}function le(){if(!oe){var e=re(se);oe=!0;for(var t=ie.length;t;){for(ne=ie,ie=[];++ae<t;)ne&&ne[ae].run();ae=-1,t=ie.length}ne=null,oe=!1,function(e){if(K===clearTimeout)return clearTimeout(e);if((K===te||!K)&&clearTimeout)return K=clearTimeout,clearTimeout(e);try{K(e)}catch(t){try{return K.call(null,e)}catch(t){return K.call(this,e)}}}(e)}}function ue(e,t){this.fun=e,this.array=t}function ce(){}X.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];ie.push(new ue(e,t)),1!==ie.length||oe||re(le)},ue.prototype.run=function(){this.fun.apply(null,this.array)},X.title="browser",X.browser=!0,X.env={},X.argv=[],X.version="",X.versions={},X.on=ce,X.addListener=ce,X.once=ce,X.off=ce,X.removeListener=ce,X.removeAllListeners=ce,X.emit=ce,X.prependListener=ce,X.prependOnceListener=ce,X.listeners=function(e){return[]},X.binding=function(e){throw new Error("process.binding is not supported")},X.cwd=function(){return"/"},X.chdir=function(e){throw new Error("process.chdir is not supported")},X.umask=function(){return 0};var fe={};(function(e){"use strict";var t=!1;"undefined"!=typeof window&&void 0!==window.document&&(t={level:3,hasBasic:!0,has256:!0,has16m:!0});var r="win32"===e.platform&&!"xterm-256color".toLowerCase().startsWith("xterm"),n=["ansi","ansi","ansi256","ansi16m"],i=new Set(["gray"]),o=Object.create(null);function a(e,r){r=r||{};var n=t?t.level:0;e.level=void 0===r.level?n:r.level,e.enabled="enabled"in r?r.enabled:e.level>0}function s(e){if(!this||!(null!=(r=s)&&"undefined"!=typeof Symbol&&r[Symbol.hasInstance]?r[Symbol.hasInstance](this):this instanceof r)||this.template){var t={};return a(t,e),t.template=function(){for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];return function(e,t){if(!Array.isArray(t))return[].slice.call(arguments,1).join(" ");for(var r=[].slice.call(arguments,2),n=[t.raw[0]],i=1;i<t.length;i++)n.push(String(r[i-1]).replace(/[{}\\]/g,"\\$&")),n.push(String(t.raw[i]));return C(e,n.join(""))}.apply(void 0,function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(i=[t.template].concat(r))||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(i)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}());var i},Object.setPrototypeOf(t,s.prototype),Object.setPrototypeOf(t.template,t),t.template.constructor=s,t.template}var r;a(this,e)}r&&(G.blue.open="[94m");for(var l=Object.keys(G),u=function(){var e=l[c];G[e].closeRe=new RegExp(V(G[e].close),"g"),o[e]={get:function(){var t=G[e];return v.call(this,this._styles?this._styles.concat(t):[t],this._empty,e)}}},c=0;c<l.length;c++)u();o.visible={get:function(){return v.call(this,this._styles||[],!0,"visible")}},G.color.closeRe=new RegExp(V(G.color.close),"g");for(var f=Object.keys(G.color.ansi),h=function(){var e=f[p];if(i.has(e))return"continue";o[e]={get:function(){var t=this.level;return function(){for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];var a={open:G.color[n[t]][e].apply(null,i),close:G.color.close,closeRe:G.color.closeRe};return v.call(this,this._styles?this._styles.concat(a):[a],this._empty,e)}}}},p=0;p<f.length;p++)h();G.bgColor.closeRe=new RegExp(V(G.bgColor.close),"g");for(var d=Object.keys(G.bgColor.ansi),g=function(){var e=d[y];if(i.has(e))return"continue";var t="bg"+e[0].toUpperCase()+e.slice(1);o[t]={get:function(){var t=this.level;return function(){for(var r=arguments.length,i=new Array(r),o=0;o<r;o++)i[o]=arguments[o];var a={open:G.bgColor[n[t]][e].apply(null,i),close:G.bgColor.close,closeRe:G.bgColor.closeRe};return v.call(this,this._styles?this._styles.concat(a):[a],this._empty,e)}}}},y=0;y<d.length;y++)g();var b=Object.defineProperties(function(){},o);function v(e,t,n){var i=function e(){for(var t=arguments.length,n=new Array(t),i=0;i<t;i++)n[i]=arguments[i];return function(){var e=arguments.length,t=String(arguments.length<=0?void 0:arguments[0]);if(0===e)return"";if(e>1)for(var n=1;n<e;n++)t+=" "+(n<0||arguments.length<=n?void 0:arguments[n]);if(!this.enabled||this.level<=0||!t)return this._empty?"":t;var i=G.dim.open;r&&this.hasGrey&&(G.dim.open="");var o=!0,a=!1,s=void 0;try{for(var l,u=this._styles.slice().reverse()[Symbol.iterator]();!(o=(l=u.next()).done);o=!0){var c=l.value;t=(t=c.open+t.replace(c.closeRe,c.open)+c.close).replace(/\r?\n/g,"".concat(c.close,"$&").concat(c.open))}}catch(e){a=!0,s=e}finally{try{o||null==u.return||u.return()}finally{if(a)throw s}}return G.dim.open=i,t}.apply(e,n)};i._styles=e,i._empty=t;var o=this;return Object.defineProperty(i,"level",{enumerable:!0,get:function(){return o.level},set:function(e){o.level=e}}),Object.defineProperty(i,"enabled",{enumerable:!0,get:function(){return o.enabled},set:function(e){o.enabled=e}}),i.hasGrey=this.hasGrey||"gray"===n||"grey"===n,i.__proto__=b,i}Object.defineProperties(s.prototype,o),(fe=s()).supportsColor=t,fe.default=fe}).call(this,Z);var he={};(function(e){"use strict";const t=e.platform,r={tick:"✔",cross:"✖",star:"★",square:"▇",squareSmall:"◻",squareSmallFilled:"◼",play:"▶",circle:"◯",circleFilled:"◉",circleDotted:"◌",circleDouble:"◎",circleCircle:"ⓞ",circleCross:"ⓧ",circlePipe:"Ⓘ",circleQuestionMark:"?⃝",bullet:"●",dot:"․",line:"─",ellipsis:"…",pointer:"❯",pointerSmall:"›",info:"ℹ",warning:"⚠",hamburger:"☰",smiley:"㋡",mustache:"෴",heart:"♥",arrowUp:"↑",arrowDown:"↓",arrowLeft:"←",arrowRight:"→",radioOn:"◉",radioOff:"◯",checkboxOn:"☒",checkboxOff:"☐",checkboxCircleOn:"ⓧ",checkboxCircleOff:"Ⓘ",questionMarkPrefix:"?⃝",oneHalf:"½",oneThird:"⅓",oneQuarter:"¼",oneFifth:"⅕",oneSixth:"⅙",oneSeventh:"⅐",oneEighth:"⅛",oneNinth:"⅑",oneTenth:"⅒",twoThirds:"⅔",twoFifths:"⅖",threeQuarters:"¾",threeFifths:"⅗",threeEighths:"⅜",fourFifths:"⅘",fiveSixths:"⅚",fiveEighths:"⅝",sevenEighths:"⅞"},n={tick:"√",cross:"×",star:"*",square:"█",squareSmall:"[ ]",squareSmallFilled:"[█]",play:"►",circle:"( )",circleFilled:"(*)",circleDotted:"( )",circleDouble:"( )",circleCircle:"(○)",circleCross:"(×)",circlePipe:"(│)",circleQuestionMark:"(?)",bullet:"*",dot:".",line:"─",ellipsis:"...",pointer:">",pointerSmall:"»",info:"i",warning:"‼",hamburger:"≡",smiley:"☺",mustache:"┌─┐",heart:r.heart,arrowUp:r.arrowUp,arrowDown:r.arrowDown,arrowLeft:r.arrowLeft,arrowRight:r.arrowRight,radioOn:"(*)",radioOff:"( )",checkboxOn:"[×]",checkboxOff:"[ ]",checkboxCircleOn:"(×)",checkboxCircleOff:"( )",questionMarkPrefix:"？",oneHalf:"1/2",oneThird:"1/3",oneQuarter:"1/4",oneFifth:"1/5",oneSixth:"1/6",oneSeventh:"1/7",oneEighth:"1/8",oneNinth:"1/9",oneTenth:"1/10",twoThirds:"2/3",twoFifths:"2/5",threeQuarters:"3/4",threeFifths:"3/5",threeEighths:"3/8",fourFifths:"4/5",fiveSixths:"5/6",fiveEighths:"5/8",sevenEighths:"7/8"};"linux"===t&&(r.questionMarkPrefix="?");const i="win32"===t?n:r;he=Object.assign(e=>i===r?e:(Object.keys(r).forEach(t=>{r[t]!==i[t]&&(e=e.replace(new RegExp(V(r[t]),"g"),i[t]))}),e),i)}).call(this,Z);var pe={};(function(e){"use strict";function t(e){if("string"!=typeof e)throw new TypeError("Path must be a string. Received "+JSON.stringify(e))}function r(e,t){for(var r,n="",i=0,o=-1,a=0,s=0;s<=e.length;++s){if(s<e.length)r=e.charCodeAt(s);else{if(47===r)break;r=47}if(47===r){if(o===s-1||1===a);else if(o!==s-1&&2===a){if(n.length<2||2!==i||46!==n.charCodeAt(n.length-1)||46!==n.charCodeAt(n.length-2))if(n.length>2){var l=n.lastIndexOf("/");if(l!==n.length-1){-1===l?(n="",i=0):i=(n=n.slice(0,l)).length-1-n.lastIndexOf("/"),o=s,a=0;continue}}else if(2===n.length||1===n.length){n="",i=0,o=s,a=0;continue}t&&(n.length>0?n+="/..":n="..",i=2)}else n.length>0?n+="/"+e.slice(o+1,s):n=e.slice(o+1,s),i=s-o-1;o=s,a=0}else 46===r&&-1!==a?++a:a=-1}return n}var n={resolve:function(){for(var n,i="",o=!1,a=arguments.length-1;a>=-1&&!o;a--){var s;a>=0?s=arguments[a]:(void 0===n&&(n=e.cwd()),s=n),t(s),0!==s.length&&(i=s+"/"+i,o=47===s.charCodeAt(0))}return i=r(i,!o),o?i.length>0?"/"+i:"/":i.length>0?i:"."},normalize:function(e){if(t(e),0===e.length)return".";var n=47===e.charCodeAt(0),i=47===e.charCodeAt(e.length-1);return 0!==(e=r(e,!n)).length||n||(e="."),e.length>0&&i&&(e+="/"),n?"/"+e:e},isAbsolute:function(e){return t(e),e.length>0&&47===e.charCodeAt(0)},join:function(){if(0===arguments.length)return".";for(var e,r=0;r<arguments.length;++r){var i=arguments[r];t(i),i.length>0&&(void 0===e?e=i:e+="/"+i)}return void 0===e?".":n.normalize(e)},relative:function(e,r){if(t(e),t(r),e===r)return"";if((e=n.resolve(e))===(r=n.resolve(r)))return"";for(var i=1;i<e.length&&47===e.charCodeAt(i);++i);for(var o=e.length,a=o-i,s=1;s<r.length&&47===r.charCodeAt(s);++s);for(var l=r.length-s,u=a<l?a:l,c=-1,f=0;f<=u;++f){if(f===u){if(l>u){if(47===r.charCodeAt(s+f))return r.slice(s+f+1);if(0===f)return r.slice(s+f)}else a>u&&(47===e.charCodeAt(i+f)?c=f:0===f&&(c=0));break}var h=e.charCodeAt(i+f);if(h!==r.charCodeAt(s+f))break;47===h&&(c=f)}var p="";for(f=i+c+1;f<=o;++f)f!==o&&47!==e.charCodeAt(f)||(0===p.length?p+="..":p+="/..");return p.length>0?p+r.slice(s+c):(s+=c,47===r.charCodeAt(s)&&++s,r.slice(s))},_makeLong:function(e){return e},dirname:function(e){if(t(e),0===e.length)return".";for(var r=e.charCodeAt(0),n=47===r,i=-1,o=!0,a=e.length-1;a>=1;--a)if(47===(r=e.charCodeAt(a))){if(!o){i=a;break}}else o=!1;return-1===i?n?"/":".":n&&1===i?"//":e.slice(0,i)},basename:function(e,r){if(void 0!==r&&"string"!=typeof r)throw new TypeError('"ext" argument must be a string');t(e);var n,i=0,o=-1,a=!0;if(void 0!==r&&r.length>0&&r.length<=e.length){if(r.length===e.length&&r===e)return"";var s=r.length-1,l=-1;for(n=e.length-1;n>=0;--n){var u=e.charCodeAt(n);if(47===u){if(!a){i=n+1;break}}else-1===l&&(a=!1,l=n+1),s>=0&&(u===r.charCodeAt(s)?-1==--s&&(o=n):(s=-1,o=l))}return i===o?o=l:-1===o&&(o=e.length),e.slice(i,o)}for(n=e.length-1;n>=0;--n)if(47===e.charCodeAt(n)){if(!a){i=n+1;break}}else-1===o&&(a=!1,o=n+1);return-1===o?"":e.slice(i,o)},extname:function(e){t(e);for(var r=-1,n=0,i=-1,o=!0,a=0,s=e.length-1;s>=0;--s){var l=e.charCodeAt(s);if(47!==l)-1===i&&(o=!1,i=s+1),46===l?-1===r?r=s:1!==a&&(a=1):-1!==r&&(a=-1);else if(!o){n=s+1;break}}return-1===r||-1===i||0===a||1===a&&r===i-1&&r===n+1?"":e.slice(r,i)},format:function(e){if(null===e||"object"!=typeof e)throw new TypeError('The "pathObject" argument must be of type Object. Received type '+typeof e);return r=(t=e).dir||t.root,n=t.base||(t.name||"")+(t.ext||""),r?r===t.root?r+n:r+"/"+n:n;var t,r,n},parse:function(e){t(e);var r={root:"",dir:"",base:"",ext:"",name:""};if(0===e.length)return r;var n,i=e.charCodeAt(0),o=47===i;o?(r.root="/",n=1):n=0;for(var a=-1,s=0,l=-1,u=!0,c=e.length-1,f=0;c>=n;--c)if(47!==(i=e.charCodeAt(c)))-1===l&&(u=!1,l=c+1),46===i?-1===a?a=c:1!==f&&(f=1):-1!==a&&(f=-1);else if(!u){s=c+1;break}return-1===a||-1===l||0===f||1===f&&a===l-1&&a===s+1?-1!==l&&(r.base=r.name=0===s&&o?e.slice(1,l):e.slice(s,l)):(0===s&&o?(r.name=e.slice(1,a),r.base=e.slice(1,l)):(r.name=e.slice(s,a),r.base=e.slice(s,l)),r.ext=e.slice(a,l)),s>0?r.dir=e.slice(0,s-1):o&&(r.dir="/"),r},sep:"/",delimiter:":",win32:null,posix:null};n.posix=n,pe=n}).call(this,Z);var de=e=>{if(e<1)throw new TypeError("Expected `concurrency` to be a number from 1 and up");const t=[];let r=0;const n=()=>{r--,t.length>0&&t.shift()()};return i=>new Promise((o,a)=>{const s=()=>{r++,(e=>new Promise(t=>{t(e())}))(i).then(e=>{o(e),n()},e=>{a(e),n()})};r<e?s():t.push(s)})};class ge extends Error{constructor(e){super(),this.value=e}}var ye,be={};(ye=(e=>new Promise(t=>{be.access(e,e=>{t(!e)})}))).sync=(e=>{try{return be.accessSync(e),!0}catch(e){return!1}});var ve,me={};(function(e){"use strict";(me=((t,r)=>(r=Object.assign({cwd:e.cwd()},r),((e,t,r)=>{r=Object.assign({concurrency:1/0,preserveOrder:!0},r);const n=de(r.concurrency),i=Array.from(e).map(e=>[e,n(()=>Promise.resolve(e).then(t))]),o=de(r.preserveOrder?1:1/0);return Promise.all(i.map(e=>o(()=>(e=>Promise.all(e).then(e=>!0===e[1]&&Promise.reject(new ge(e[0]))))(e)))).then(()=>{}).catch(e=>e instanceof ge?e.value:Promise.reject(e))})(t,e=>ye(pe.resolve(r.cwd,e)),r)))).sync=((t,r)=>{r=Object.assign({cwd:e.cwd()},r);for(const e of t)if(ye.sync(pe.resolve(r.cwd,e)))return e})}).call(this,Z),(ve=((e,t)=>{t=t||{};const r=pe.resolve(t.cwd||""),n=pe.parse(r).root,i=[].concat(e);return new Promise(e=>{!function t(r){me(i,{cwd:r}).then(i=>{i?e(pe.join(r,i)):r===n?e(null):t(pe.dirname(r))})}(r)})})).sync=((e,t)=>{t=t||{};let r=pe.resolve(t.cwd||"");const n=pe.parse(r).root,i=[].concat(e);for(;;){const e=me.sync(i,{cwd:r});if(e)return pe.join(r,e);if(r===n)return null;r=pe.dirname(r)}});var we;we="function"==typeof Object.create?function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:function(e,t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e};var _e={};(function(e,t){var r=/%[sdj%]/g;function n(e,t){var r={seen:[],stylize:o};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),u(t)?r.showHidden=t:t&&_e._extend(r,t),h(r.showHidden)&&(r.showHidden=!1),h(r.depth)&&(r.depth=2),h(r.colors)&&(r.colors=!1),h(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=i),a(r,e,r.depth)}function i(e,t){var r=n.styles[t];return r?"["+n.colors[r][0]+"m"+e+"["+n.colors[r][1]+"m":e}function o(e,t){return e}function a(e,t,r){if(e.customInspect&&t&&b(t.inspect)&&t.inspect!==_e.inspect&&(!t.constructor||t.constructor.prototype!==t)){var n=t.inspect(r,e);return f(n)||(n=a(e,n,r)),n}var i=function(e,t){if(h(t))return e.stylize("undefined","undefined");if(f(t)){var r="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(r,"string")}return function(e){return"number"==typeof e}(t)?e.stylize(""+t,"number"):u(t)?e.stylize(""+t,"boolean"):c(t)?e.stylize("null","null"):void 0}(e,t);if(i)return i;var o,d=Object.keys(t),v=(o={},d.forEach(function(e,t){o[e]=!0}),o);if(e.showHidden&&(d=Object.getOwnPropertyNames(t)),y(t)&&(d.indexOf("message")>=0||d.indexOf("description")>=0))return s(t);if(0===d.length){if(b(t)){var w=t.name?": "+t.name:"";return e.stylize("[Function"+w+"]","special")}if(p(t))return e.stylize(RegExp.prototype.toString.call(t),"regexp");if(g(t))return e.stylize(Date.prototype.toString.call(t),"date");if(y(t))return s(t)}var _,S="",E=!1,k=["{","}"];return function(e){return Array.isArray(e)}(t)&&(E=!0,k=["[","]"]),b(t)&&(S=" [Function"+(t.name?": "+t.name:"")+"]"),p(t)&&(S=" "+RegExp.prototype.toString.call(t)),g(t)&&(S=" "+Date.prototype.toUTCString.call(t)),y(t)&&(S=" "+s(t)),0!==d.length||E&&0!=t.length?r<0?p(t)?e.stylize(RegExp.prototype.toString.call(t),"regexp"):e.stylize("[Object]","special"):(e.seen.push(t),_=E?function(e,t,r,n,i){for(var o=[],a=0,s=t.length;a<s;++a)m(t,String(a))?o.push(l(e,t,r,n,String(a),!0)):o.push("");return i.forEach(function(i){i.match(/^\d+$/)||o.push(l(e,t,r,n,i,!0))}),o}(e,t,r,v,d):d.map(function(n){return l(e,t,r,v,n,E)}),e.seen.pop(),function(e,t,r){return e.reduce(function(e,t){return t.indexOf("\n"),e+t.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60?r[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+r[1]:r[0]+t+" "+e.join(", ")+" "+r[1]}(_,S,k)):k[0]+S+k[1]}function s(e){return"["+Error.prototype.toString.call(e)+"]"}function l(e,t,r,n,i,o){var s,l,u;if((u=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]}).get?l=u.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):u.set&&(l=e.stylize("[Setter]","special")),m(n,i)||(s="["+i+"]"),l||(e.seen.indexOf(u.value)<0?(l=c(r)?a(e,u.value,null):a(e,u.value,r-1)).indexOf("\n")>-1&&(l=o?l.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+l.split("\n").map(function(e){return"   "+e}).join("\n")):l=e.stylize("[Circular]","special")),h(s)){if(o&&i.match(/^\d+$/))return l;(s=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"))}return s+": "+l}function u(e){return"boolean"==typeof e}function c(e){return null===e}function f(e){return"string"==typeof e}function h(e){return void 0===e}function p(e){return d(e)&&"[object RegExp]"===v(e)}function d(e){return"object"==typeof e&&null!==e}function g(e){return d(e)&&"[object Date]"===v(e)}function y(e){return d(e)&&("[object Error]"===v(e)||e instanceof Error)}function b(e){return"function"==typeof e}function v(e){return Object.prototype.toString.call(e)}function m(e,t){return Object.prototype.hasOwnProperty.call(e,t)}_e.format=function(e){if(!f(e)){for(var t=[],i=0;i<arguments.length;i++)t.push(n(arguments[i]));return t.join(" ")}i=1;for(var o=arguments,a=o.length,s=String(e).replace(r,function(e){if("%%"===e)return"%";if(i>=a)return e;switch(e){case"%s":return String(o[i++]);case"%d":return Number(o[i++]);case"%j":try{return JSON.stringify(o[i++])}catch(e){return"[Circular]"}default:return e}}),l=o[i];i<a;l=o[++i])c(l)||!d(l)?s+=" "+l:s+=" "+n(l);return s},_e.deprecate=function(r,n){if(h(t.process))return function(){return _e.deprecate(r,n).apply(this,arguments)};if(!0===e.noDeprecation)return r;var i=!1;return function(){if(!i){if(e.throwDeprecation)throw new Error(n);e.traceDeprecation?console.trace(n):console.error(n),i=!0}return r.apply(this,arguments)}},_e.inspect=n,n.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},n.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},_e.isRegExp=p,_e.isDate=g,_e.isError=y,_e.isFunction=b,_e.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},_e.inherits=we,_e._extend=function(e,t){if(!t||!d(t))return e;for(var r=Object.keys(t),n=r.length;n--;)e[r[n]]=t[r[n]];return e}}).call(this,Z,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});var Se={};(function(e){"use strict";function t(e,t){if(e===t)return 0;for(var r=e.length,n=t.length,i=0,o=Math.min(r,n);i<o;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0}function r(t){return e.Buffer&&"function"==typeof e.Buffer.isBuffer?e.Buffer.isBuffer(t):!(null==t||!t._isBuffer)}var n=Object.prototype.hasOwnProperty,i=Array.prototype.slice,o="foo"===function(){}.name;function a(e){return Object.prototype.toString.call(e)}function s(t){return!r(t)&&"function"==typeof e.ArrayBuffer&&("function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):!!t&&(t instanceof DataView||!!(t.buffer&&t.buffer instanceof ArrayBuffer)))}var l=Se=d,u=/\s*function\s+([^\(\s]*)\s*/;function c(e){if(_e.isFunction(e)){if(o)return e.name;var t=e.toString().match(u);return t&&t[1]}}function f(e,t){return"string"==typeof e?e.length<t?e:e.slice(0,t):e}function h(e){if(o||!_e.isFunction(e))return _e.inspect(e);var t=c(e);return"[Function"+(t?": "+t:"")+"]"}function p(e,t,r,n,i){throw new l.AssertionError({message:r,actual:e,expected:t,operator:n,stackStartFunction:i})}function d(e,t){e||p(e,!0,t,"==",l.ok)}function g(e,n,o,l){if(e===n)return!0;if(r(e)&&r(n))return 0===t(e,n);if(_e.isDate(e)&&_e.isDate(n))return e.getTime()===n.getTime();if(_e.isRegExp(e)&&_e.isRegExp(n))return e.source===n.source&&e.global===n.global&&e.multiline===n.multiline&&e.lastIndex===n.lastIndex&&e.ignoreCase===n.ignoreCase;if(null!==e&&"object"==typeof e||null!==n&&"object"==typeof n){if(s(e)&&s(n)&&a(e)===a(n)&&!(e instanceof Float32Array||e instanceof Float64Array))return 0===t(new Uint8Array(e.buffer),new Uint8Array(n.buffer));if(r(e)!==r(n))return!1;var u=(l=l||{actual:[],expected:[]}).actual.indexOf(e);return-1!==u&&u===l.expected.indexOf(n)||(l.actual.push(e),l.expected.push(n),function(e,t,r,n){if(null==e||null==t)return!1;if(_e.isPrimitive(e)||_e.isPrimitive(t))return e===t;if(r&&Object.getPrototypeOf(e)!==Object.getPrototypeOf(t))return!1;var o=y(e),a=y(t);if(o&&!a||!o&&a)return!1;if(o)return g(e=i.call(e),t=i.call(t),r);var s,l,u=m(e),c=m(t);if(u.length!==c.length)return!1;for(u.sort(),c.sort(),l=u.length-1;l>=0;l--)if(u[l]!==c[l])return!1;for(l=u.length-1;l>=0;l--)if(!g(e[s=u[l]],t[s],r,n))return!1;return!0}(e,n,o,l))}return o?e===n:e==n}function y(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function b(e,t){if(!e||!t)return!1;if("[object RegExp]"==Object.prototype.toString.call(t))return t.test(e);try{if(e instanceof t)return!0}catch(e){}return!Error.isPrototypeOf(t)&&!0===t.call({},e)}function v(e,t,r,n){var i;if("function"!=typeof t)throw new TypeError('"block" argument must be a function');"string"==typeof r&&(n=r,r=null),i=function(e){var t;try{e()}catch(e){t=e}return t}(t),n=(r&&r.name?" ("+r.name+").":".")+(n?" "+n:"."),e&&!i&&p(i,r,"Missing expected exception"+n);var o="string"==typeof n,a=!e&&i&&!r;if((!e&&_e.isError(i)&&o&&b(i,r)||a)&&p(i,r,"Got unwanted exception"+n),e&&i&&r&&!b(i,r)||!e&&i)throw i}l.AssertionError=function(e){this.name="AssertionError",this.actual=e.actual,this.expected=e.expected,this.operator=e.operator,e.message?(this.message=e.message,this.generatedMessage=!1):(this.message=f(h(this.actual),128)+" "+this.operator+" "+f(h(this.expected),128),this.generatedMessage=!0);var t=e.stackStartFunction||p;if(Error.captureStackTrace)Error.captureStackTrace(this,t);else{var r=new Error;if(r.stack){var n=r.stack,i=c(t),o=n.indexOf("\n"+i);if(o>=0){var a=n.indexOf("\n",o+1);n=n.substring(a+1)}this.stack=n}}},_e.inherits(l.AssertionError,Error),l.fail=p,l.ok=d,l.equal=function(e,t,r){e!=t&&p(e,t,r,"==",l.equal)},l.notEqual=function(e,t,r){e==t&&p(e,t,r,"!=",l.notEqual)},l.deepEqual=function(e,t,r){g(e,t,!1)||p(e,t,r,"deepEqual",l.deepEqual)},l.deepStrictEqual=function(e,t,r){g(e,t,!0)||p(e,t,r,"deepStrictEqual",l.deepStrictEqual)},l.notDeepEqual=function(e,t,r){g(e,t,!1)&&p(e,t,r,"notDeepEqual",l.notDeepEqual)},l.notDeepStrictEqual=function e(t,r,n){g(t,r,!0)&&p(t,r,n,"notDeepStrictEqual",e)},l.strictEqual=function(e,t,r){e!==t&&p(e,t,r,"===",l.strictEqual)},l.notStrictEqual=function(e,t,r){e===t&&p(e,t,r,"!==",l.notStrictEqual)},l.throws=function(e,t,r){v(!0,e,t,r)},l.doesNotThrow=function(e,t,r){v(!1,e,t,r)},l.ifError=function(e){if(e)throw e};var m=Object.keys||function(e){var t=[];for(var r in e)n.call(e,r)&&t.push(r);return t}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});var Ee=function(e){if(null===e||"object"!=typeof e)return e;if(e instanceof Object)var t={__proto__:e.__proto__};else t=Object.create(null);return Object.getOwnPropertyNames(e).forEach(function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(e,r))}),t}(be),ke={},xe=Object.create||function(e){var t=function(){};return t.prototype=e,new t},Oe=Object.keys||function(e){var t=[];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.push(r);return r},je=Function.prototype.bind||function(e){var t=this;return function(){return t.apply(e,arguments)}};function Ae(){this._events&&Object.prototype.hasOwnProperty.call(this,"_events")||(this._events=xe(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0}ke=Ae,Ae.EventEmitter=Ae,Ae.prototype._events=void 0,Ae.prototype._maxListeners=void 0;var Me,Ce=10;try{var Te={};Object.defineProperty&&Object.defineProperty(Te,"x",{value:0}),Me=0===Te.x}catch(e){Me=!1}function Le(e){return void 0===e._maxListeners?Ae.defaultMaxListeners:e._maxListeners}function Be(e,t,r,n){var i,o,a;if("function"!=typeof r)throw new TypeError('"listener" argument must be a function');if((o=e._events)?(o.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),o=e._events),a=o[t]):(o=e._events=xe(null),e._eventsCount=0),a){if("function"==typeof a?a=o[t]=n?[r,a]:[a,r]:n?a.unshift(r):a.push(r),!a.warned&&(i=Le(e))&&i>0&&a.length>i){a.warned=!0;var s=new Error("Possible EventEmitter memory leak detected. "+a.length+' "'+String(t)+'" listeners added. Use emitter.setMaxListeners() to increase limit.');s.name="MaxListenersExceededWarning",s.emitter=e,s.type=t,s.count=a.length,"object"==typeof console&&console.warn&&console.warn("%s: %s",s.name,s.message)}}else a=o[t]=r,++e._eventsCount;return e}function Re(){if(!this.fired)switch(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,arguments.length){case 0:return this.listener.call(this.target);case 1:return this.listener.call(this.target,arguments[0]);case 2:return this.listener.call(this.target,arguments[0],arguments[1]);case 3:return this.listener.call(this.target,arguments[0],arguments[1],arguments[2]);default:for(var e=new Array(arguments.length),t=0;t<e.length;++t)e[t]=arguments[t];this.listener.apply(this.target,e)}}function Ne(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},i=je.call(Re,n);return i.listener=r,n.wrapFn=i,i}function Pe(e,t,r){var n=e._events;if(!n)return[];var i=n[t];return i?"function"==typeof i?r?[i.listener||i]:[i]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(i):Fe(i,i.length):[]}function Ie(e){var t=this._events;if(t){var r=t[e];if("function"==typeof r)return 1;if(r)return r.length}return 0}function Fe(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}Me?Object.defineProperty(Ae,"defaultMaxListeners",{enumerable:!0,get:function(){return Ce},set:function(e){if("number"!=typeof e||e<0||e!=e)throw new TypeError('"defaultMaxListeners" must be a positive number');Ce=e}}):Ae.defaultMaxListeners=Ce,Ae.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw new TypeError('"n" argument must be a positive number');return this._maxListeners=e,this},Ae.prototype.getMaxListeners=function(){return Le(this)},Ae.prototype.emit=function(e){var t,r,n,i,o,a,s="error"===e;if(a=this._events)s=s&&null==a.error;else if(!s)return!1;if(s){if(arguments.length>1&&(t=arguments[1]),t instanceof Error)throw t;var l=new Error('Unhandled "error" event. ('+t+")");throw l.context=t,l}if(!(r=a[e]))return!1;var u="function"==typeof r;switch(n=arguments.length){case 1:!function(e,t,r){if(u)e.call(r);else for(var n=e.length,i=Fe(e,n),o=0;o<n;++o)i[o].call(r)}(r,0,this);break;case 2:!function(e,t,r,n){if(t)e.call(r,n);else for(var i=e.length,o=Fe(e,i),a=0;a<i;++a)o[a].call(r,n)}(r,u,this,arguments[1]);break;case 3:!function(e,t,r,n,i){if(t)e.call(r,n,i);else for(var o=e.length,a=Fe(e,o),s=0;s<o;++s)a[s].call(r,n,i)}(r,u,this,arguments[1],arguments[2]);break;case 4:!function(e,t,r,n,i,o){if(t)e.call(r,n,i,o);else for(var a=e.length,s=Fe(e,a),l=0;l<a;++l)s[l].call(r,n,i,o)}(r,u,this,arguments[1],arguments[2],arguments[3]);break;default:for(i=new Array(n-1),o=1;o<n;o++)i[o-1]=arguments[o];!function(e,t,r,n){if(u)e.apply(r,n);else for(var i=e.length,o=Fe(e,i),a=0;a<i;++a)o[a].apply(r,n)}(r,0,this,i)}return!0},Ae.prototype.addListener=function(e,t){return Be(this,e,t,!1)},Ae.prototype.on=Ae.prototype.addListener,Ae.prototype.prependListener=function(e,t){return Be(this,e,t,!0)},Ae.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.on(e,Ne(this,e,t)),this},Ae.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.prependListener(e,Ne(this,e,t)),this},Ae.prototype.removeListener=function(e,t){var r,n,i,o,a;if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');if(!(n=this._events))return this;if(!(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=xe(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(i=-1,o=r.length-1;o>=0;o--)if(r[o]===t||r[o].listener===t){a=r[o].listener,i=o;break}if(i<0)return this;0===i?r.shift():function(e,t){for(var r=i,n=r+1,o=e.length;n<o;r+=1,n+=1)e[r]=e[n];e.pop()}(r),1===r.length&&(n[e]=r[0]),n.removeListener&&this.emit("removeListener",e,a||t)}return this},Ae.prototype.removeAllListeners=function(e){var t,r,n;if(!(r=this._events))return this;if(!r.removeListener)return 0===arguments.length?(this._events=xe(null),this._eventsCount=0):r[e]&&(0==--this._eventsCount?this._events=xe(null):delete r[e]),this;if(0===arguments.length){var i,o=Oe(r);for(n=0;n<o.length;++n)"removeListener"!==(i=o[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=xe(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},Ae.prototype.listeners=function(e){return Pe(this,e,!0)},Ae.prototype.rawListeners=function(e){return Pe(this,e,!1)},Ae.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):Ie.call(e,t)},Ae.prototype.listenerCount=Ie,Ae.prototype.eventNames=function(){return this._eventsCount>0?Reflect.ownKeys(this._events):[]};var Ue={};function De(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}Ue="function"==typeof Object.create?function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:function(e,t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e};var qe={};(function(e){function t(e){return Object.prototype.toString.call(e)}qe.isArray=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===t(e)},qe.isBoolean=function(e){return"boolean"==typeof e},qe.isNull=function(e){return null===e},qe.isNullOrUndefined=function(e){return null==e},qe.isNumber=function(e){return"number"==typeof e},qe.isString=function(e){return"string"==typeof e},qe.isSymbol=function(e){return"symbol"==typeof e},qe.isUndefined=function(e){return void 0===e},qe.isRegExp=function(e){return"[object RegExp]"===t(e)},qe.isObject=function(e){return"object"==typeof e&&null!==e},qe.isDate=function(e){return"[object Date]"===t(e)},qe.isError=function(e){return"[object Error]"===t(e)||e instanceof Error},qe.isFunction=function(e){return"function"==typeof e},qe.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},qe.isBuffer=e.isBuffer}).call(this,{isBuffer:function(e){return null!=e&&(De(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&De(e.slice(0,0))}(e)||!!e._isBuffer)}});var ze={};(function(e){"use strict";ze=!e.version||0===e.version.indexOf("v0.")||0===e.version.indexOf("v1.")&&0!==e.version.indexOf("v1.8.")?{nextTick:function(t,r,n,i){if("function"!=typeof t)throw new TypeError('"callback" argument must be a function');var o,a,s=arguments.length;switch(s){case 0:case 1:return e.nextTick(t);case 2:return e.nextTick(function(){t.call(null,r)});case 3:return e.nextTick(function(){t.call(null,r,n)});case 4:return e.nextTick(function(){t.call(null,r,n,i)});default:for(o=new Array(s-1),a=0;a<o.length;)o[a++]=arguments[a];return e.nextTick(function(){t.apply(null,o)})}}}:e}).call(this,Z);for(var We={},Ge={}.toString,$e=Array.isArray||function(e){return"[object Array]"==Ge.call(e)},Ye={toByteArray:function(e){for(var t,r=function(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}(e),n=r[0],i=r[1],o=new Ke(3*(n+i)/4-i),a=0,s=i>0?n-4:n,l=0;l<s;l+=4)t=Je[e.charCodeAt(l)]<<18|Je[e.charCodeAt(l+1)]<<12|Je[e.charCodeAt(l+2)]<<6|Je[e.charCodeAt(l+3)],o[a++]=t>>16&255,o[a++]=t>>8&255,o[a++]=255&t;return 2===i&&(t=Je[e.charCodeAt(l)]<<2|Je[e.charCodeAt(l+1)]>>4,o[a++]=255&t),1===i&&(t=Je[e.charCodeAt(l)]<<10|Je[e.charCodeAt(l+1)]<<4|Je[e.charCodeAt(l+2)]>>2,o[a++]=t>>8&255,o[a++]=255&t),o},fromByteArray:function(e){for(var t,r=e.length,n=r%3,i=[],o=0,a=r-n;o<a;o+=16383)i.push(Xe(e,o,o+16383>a?a:o+16383));return 1===n?(t=e[r-1],i.push(He[t>>2]+He[t<<4&63]+"==")):2===n&&(t=(e[r-2]<<8)+e[r-1],i.push(He[t>>10]+He[t>>4&63]+He[t<<2&63]+"=")),i.join("")}},He=[],Je=[],Ke="undefined"!=typeof Uint8Array?Uint8Array:Array,Qe="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",Ve=0,Ze=Qe.length;Ve<Ze;++Ve)He[Ve]=Qe[Ve],Je[Qe.charCodeAt(Ve)]=Ve;function Xe(e,t,r){for(var n,i,o=[],a=t;a<r;a+=3)n=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),o.push(He[(i=n)>>18&63]+He[i>>12&63]+He[i>>6&63]+He[63&i]);return o.join("")}Je["-".charCodeAt(0)]=62,Je["_".charCodeAt(0)]=63;var et={read:function(e,t,r,n,i){var o,a,s=8*i-n-1,l=(1<<s)-1,u=l>>1,c=-7,f=r?i-1:0,h=r?-1:1,p=e[t+f];for(f+=h,o=p&(1<<-c)-1,p>>=-c,c+=s;c>0;o=256*o+e[t+f],f+=h,c-=8);for(a=o&(1<<-c)-1,o>>=-c,c+=n;c>0;a=256*a+e[t+f],f+=h,c-=8);if(0===o)o=1-u;else{if(o===l)return a?NaN:1/0*(p?-1:1);a+=Math.pow(2,n),o-=u}return(p?-1:1)*a*Math.pow(2,o-n)},write:function(e,t,r,n,i,o){var a,s,l,u=8*o-i-1,c=(1<<u)-1,f=c>>1,h=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:o-1,d=n?1:-1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=c):(a=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-a))<1&&(a--,l*=2),(t+=a+f>=1?h/l:h*Math.pow(2,1-f))*l>=2&&(a++,l/=2),a+f>=c?(s=0,a=c):a+f>=1?(s=(t*l-1)*Math.pow(2,i),a+=f):(s=t*Math.pow(2,f-1)*Math.pow(2,i),a=0));i>=8;e[r+p]=255&s,p+=d,s/=256,i-=8);for(a=a<<i|s,u+=i;u>0;e[r+p]=255&a,p+=d,a/=256,u-=8);e[r+p-d]|=128*g}},tt={};tt.Buffer=it,tt.SlowBuffer=function(e){return+e!=e&&(e=0),it.alloc(+e)},tt.INSPECT_MAX_BYTES=50;var rt=2147483647;function nt(e){if(e>rt)throw new RangeError("Invalid typed array length");var t=new Uint8Array(e);return t.__proto__=it.prototype,t}function it(e,t,r){if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return st(e)}return ot(e,t,r)}function ot(e,t,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return Pt(e)||e&&Pt(e.buffer)?function(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('"length" is outside of buffer bounds');var n;return(n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r)).__proto__=it.prototype,n}(e,t,r):"string"==typeof e?function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!it.isEncoding(t))throw new TypeError("Unknown encoding: "+t);var r=0|ct(e,t),n=nt(r),i=n.write(e,t);return i!==r&&(n=n.slice(0,i)),n}(e,t):function(e){if(it.isBuffer(e)){var t=0|ut(e.length),r=nt(t);return 0===r.length?r:(e.copy(r,0,0,t),r)}if(e){if(ArrayBuffer.isView(e)||"length"in e)return"number"!=typeof e.length||It(e.length)?nt(0):lt(e);if("Buffer"===e.type&&Array.isArray(e.data))return lt(e.data)}throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object.")}(e)}function at(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('"size" argument must not be negative')}function st(e){return at(e),nt(e<0?0:0|ut(e))}function lt(e){for(var t=e.length<0?0:0|ut(e.length),r=nt(t),n=0;n<t;n+=1)r[n]=255&e[n];return r}function ut(e){if(e>=rt)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+rt.toString(16)+" bytes");return 0|e}function ct(e,t){if(it.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||Pt(e))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return Bt(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return Rt(e).length;default:if(n)return Bt(e).length;t=(""+t).toLowerCase(),n=!0}}function ft(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function ht(e,t,r,n,i){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),It(r=+r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof t&&(t=it.from(t,n)),it.isBuffer(t))return 0===t.length?-1:pt(e,t,r,n,i);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):pt(e,[t],r,n,i);throw new TypeError("val must be string, number or Buffer")}function pt(e,t,r,n,i){var o,a=1,s=e.length,l=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;a=2,s/=2,l/=2,r/=2}function u(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(i){var c=-1;for(o=r;o<s;o++)if(u(e,o)===u(t,-1===c?0:o-c)){if(-1===c&&(c=o),o-c+1===l)return c*a}else-1!==c&&(o-=o-c),c=-1}else for(r+l>s&&(r=s-l),o=r;o>=0;o--){for(var f=!0,h=0;h<l;h++)if(u(e,o+h)!==u(t,h)){f=!1;break}if(f)return o}return-1}function dt(e,t,r,n){r=Number(r)||0;var i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;var o=t.length;n>o/2&&(n=o/2);for(var a=0;a<n;++a){var s=parseInt(t.substr(2*a,2),16);if(It(s))return a;e[r+a]=s}return a}function gt(e,t,r,n){return Nt(Bt(t,e.length-r),e,r,n)}function yt(e,t,r,n){return Nt(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function bt(e,t,r,n){return yt(e,t,r,n)}function vt(e,t,r,n){return Nt(Rt(t),e,r,n)}function mt(e,t,r,n){return Nt(function(e,t){for(var r,n,i,o=[],a=0;a<e.length&&!((t-=2)<0);++a)n=(r=e.charCodeAt(a))>>8,i=r%256,o.push(i),o.push(n);return o}(t,e.length-r),e,r,n)}function wt(e,t,r){return 0===t&&r===e.length?Ye.fromByteArray(e):Ye.fromByteArray(e.slice(t,r))}function _t(e,t,r){r=Math.min(e.length,r);for(var n=[],i=t;i<r;){var o,a,s,l,u=e[i],c=null,f=u>239?4:u>223?3:u>191?2:1;if(i+f<=r)switch(f){case 1:u<128&&(c=u);break;case 2:128==(192&(o=e[i+1]))&&(l=(31&u)<<6|63&o)>127&&(c=l);break;case 3:o=e[i+1],a=e[i+2],128==(192&o)&&128==(192&a)&&(l=(15&u)<<12|(63&o)<<6|63&a)>2047&&(l<55296||l>57343)&&(c=l);break;case 4:o=e[i+1],a=e[i+2],s=e[i+3],128==(192&o)&&128==(192&a)&&128==(192&s)&&(l=(15&u)<<18|(63&o)<<12|(63&a)<<6|63&s)>65535&&l<1114112&&(c=l)}null===c?(c=65533,f=1):c>65535&&(c-=65536,n.push(c>>>10&1023|55296),c=56320|1023&c),n.push(c),i+=f}return function(e){var t=e.length;if(t<=St)return String.fromCharCode.apply(String,e);for(var r="",n=0;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=St));return r}(n)}tt.kMaxLength=rt,it.TYPED_ARRAY_SUPPORT=function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()}catch(e){return!1}}(),it.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(it.prototype,"parent",{get:function(){if(this instanceof it)return this.buffer}}),Object.defineProperty(it.prototype,"offset",{get:function(){if(this instanceof it)return this.byteOffset}}),"undefined"!=typeof Symbol&&Symbol.species&&it[Symbol.species]===it&&Object.defineProperty(it,Symbol.species,{value:null,configurable:!0,enumerable:!1,writable:!1}),it.poolSize=8192,it.from=function(e,t,r){return ot(e,t,r)},it.prototype.__proto__=Uint8Array.prototype,it.__proto__=Uint8Array,it.alloc=function(e,t,r){return function(e,t,r){return at(e),e<=0?nt(e):void 0!==t?"string"==typeof r?nt(e).fill(t,r):nt(e).fill(t):nt(e)}(e,t,r)},it.allocUnsafe=function(e){return st(e)},it.allocUnsafeSlow=function(e){return st(e)},it.isBuffer=function(e){return null!=e&&!0===e._isBuffer},it.compare=function(e,t){if(!it.isBuffer(e)||!it.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,i=0,o=Math.min(r,n);i<o;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0},it.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},it.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return it.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=it.allocUnsafe(t),i=0;for(r=0;r<e.length;++r){var o=e[r];if(ArrayBuffer.isView(o)&&(o=it.from(o)),!it.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(n,i),i+=o.length}return n},it.byteLength=ct,it.prototype._isBuffer=!0,it.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)ft(this,t,t+1);return this},it.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)ft(this,t,t+3),ft(this,t+1,t+2);return this},it.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)ft(this,t,t+7),ft(this,t+1,t+6),ft(this,t+2,t+5),ft(this,t+3,t+4);return this},it.prototype.toString=function(){var e=this.length;return 0===e?"":0===arguments.length?_t(this,0,e):function(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return xt(this,t,r);case"utf8":case"utf-8":return _t(this,t,r);case"ascii":return Et(this,t,r);case"latin1":case"binary":return kt(this,t,r);case"base64":return wt(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Ot(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}.apply(this,arguments)},it.prototype.toLocaleString=it.prototype.toString,it.prototype.equals=function(e){if(!it.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===it.compare(this,e)},it.prototype.inspect=function(){var e="",t=tt.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,t).match(/.{2}/g).join(" "),this.length>t&&(e+=" ... ")),"<Buffer "+e+">"},it.prototype.compare=function(e,t,r,n,i){if(!it.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),t<0||r>e.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&t>=r)return 0;if(n>=i)return-1;if(t>=r)return 1;if(this===e)return 0;for(var o=(i>>>=0)-(n>>>=0),a=(r>>>=0)-(t>>>=0),s=Math.min(o,a),l=this.slice(n,i),u=e.slice(t,r),c=0;c<s;++c)if(l[c]!==u[c]){o=l[c],a=u[c];break}return o<a?-1:a<o?1:0},it.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},it.prototype.indexOf=function(e,t,r){return ht(this,e,t,r,!0)},it.prototype.lastIndexOf=function(e,t,r){return ht(this,e,t,r,!1)},it.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-t;if((void 0===r||r>i)&&(r=i),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var o=!1;;)switch(n){case"hex":return dt(this,e,t,r);case"utf8":case"utf-8":return gt(this,e,t,r);case"ascii":return yt(this,e,t,r);case"latin1":case"binary":return bt(this,e,t,r);case"base64":return vt(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return mt(this,e,t,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},it.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var St=4096;function Et(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(127&e[i]);return n}function kt(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(e[i]);return n}function xt(e,t,r){var n,i=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>i)&&(r=i);for(var o="",a=t;a<r;++a)o+=(n=e[a])<16?"0"+n.toString(16):n.toString(16);return o}function Ot(e,t,r){for(var n=e.slice(t,r),i="",o=0;o<n.length;o+=2)i+=String.fromCharCode(n[o]+256*n[o+1]);return i}function jt(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function At(e,t,r,n,i,o){if(!it.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<o)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function Mt(e,t,r,n,i,o){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function Ct(e,t,r,n,i){return t=+t,r>>>=0,i||Mt(e,0,r,4),et.write(e,t,r,n,23,4),r+4}function Tt(e,t,r,n,i){return t=+t,r>>>=0,i||Mt(e,0,r,8),et.write(e,t,r,n,52,8),r+8}it.prototype.slice=function(e,t){var r=this.length;(e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);var n=this.subarray(e,t);return n.__proto__=it.prototype,n},it.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||jt(e,t,this.length);for(var n=this[e],i=1,o=0;++o<t&&(i*=256);)n+=this[e+o]*i;return n},it.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||jt(e,t,this.length);for(var n=this[e+--t],i=1;t>0&&(i*=256);)n+=this[e+--t]*i;return n},it.prototype.readUInt8=function(e,t){return e>>>=0,t||jt(e,1,this.length),this[e]},it.prototype.readUInt16LE=function(e,t){return e>>>=0,t||jt(e,2,this.length),this[e]|this[e+1]<<8},it.prototype.readUInt16BE=function(e,t){return e>>>=0,t||jt(e,2,this.length),this[e]<<8|this[e+1]},it.prototype.readUInt32LE=function(e,t){return e>>>=0,t||jt(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},it.prototype.readUInt32BE=function(e,t){return e>>>=0,t||jt(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},it.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||jt(e,t,this.length);for(var n=this[e],i=1,o=0;++o<t&&(i*=256);)n+=this[e+o]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*t)),n},it.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||jt(e,t,this.length);for(var n=t,i=1,o=this[e+--n];n>0&&(i*=256);)o+=this[e+--n]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*t)),o},it.prototype.readInt8=function(e,t){return e>>>=0,t||jt(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},it.prototype.readInt16LE=function(e,t){e>>>=0,t||jt(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},it.prototype.readInt16BE=function(e,t){e>>>=0,t||jt(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},it.prototype.readInt32LE=function(e,t){return e>>>=0,t||jt(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},it.prototype.readInt32BE=function(e,t){return e>>>=0,t||jt(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},it.prototype.readFloatLE=function(e,t){return e>>>=0,t||jt(e,4,this.length),et.read(this,e,!0,23,4)},it.prototype.readFloatBE=function(e,t){return e>>>=0,t||jt(e,4,this.length),et.read(this,e,!1,23,4)},it.prototype.readDoubleLE=function(e,t){return e>>>=0,t||jt(e,8,this.length),et.read(this,e,!0,52,8)},it.prototype.readDoubleBE=function(e,t){return e>>>=0,t||jt(e,8,this.length),et.read(this,e,!1,52,8)},it.prototype.writeUIntLE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||At(this,e,t,r,Math.pow(2,8*r)-1,0);var i=1,o=0;for(this[t]=255&e;++o<r&&(i*=256);)this[t+o]=e/i&255;return t+r},it.prototype.writeUIntBE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||At(this,e,t,r,Math.pow(2,8*r)-1,0);var i=r-1,o=1;for(this[t+i]=255&e;--i>=0&&(o*=256);)this[t+i]=e/o&255;return t+r},it.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||At(this,e,t,1,255,0),this[t]=255&e,t+1},it.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||At(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},it.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||At(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},it.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||At(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},it.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||At(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},it.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){var i=Math.pow(2,8*r-1);At(this,e,t,r,i-1,-i)}var o=0,a=1,s=0;for(this[t]=255&e;++o<r&&(a*=256);)e<0&&0===s&&0!==this[t+o-1]&&(s=1),this[t+o]=(e/a>>0)-s&255;return t+r},it.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){var i=Math.pow(2,8*r-1);At(this,e,t,r,i-1,-i)}var o=r-1,a=1,s=0;for(this[t+o]=255&e;--o>=0&&(a*=256);)e<0&&0===s&&0!==this[t+o+1]&&(s=1),this[t+o]=(e/a>>0)-s&255;return t+r},it.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||At(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},it.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||At(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},it.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||At(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},it.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||At(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},it.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||At(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},it.prototype.writeFloatLE=function(e,t,r){return Ct(this,e,t,!0,r)},it.prototype.writeFloatBE=function(e,t,r){return Ct(this,e,t,!1,r)},it.prototype.writeDoubleLE=function(e,t,r){return Tt(this,e,t,!0,r)},it.prototype.writeDoubleBE=function(e,t,r){return Tt(this,e,t,!1,r)},it.prototype.copy=function(e,t,r,n){if(!it.isBuffer(e))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var i=n-r;if(this===e&&"function"==typeof Uint8Array.prototype.copyWithin)this.copyWithin(t,r,n);else if(this===e&&r<t&&t<n)for(var o=i-1;o>=0;--o)e[o+t]=this[o+r];else Uint8Array.prototype.set.call(e,this.subarray(r,n),t);return i},it.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!it.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===e.length){var i=e.charCodeAt(0);("utf8"===n&&i<128||"latin1"===n)&&(e=i)}}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var o;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(o=t;o<r;++o)this[o]=e;else{var a=it.isBuffer(e)?e:new it(e,n),s=a.length;if(0===s)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(o=0;o<r-t;++o)this[o+t]=a[o%s]}return this};var Lt=/[^+\/0-9A-Za-z-_]/g;function Bt(e,t){var r;t=t||1/0;for(var n=e.length,i=null,o=[],a=0;a<n;++a){if((r=e.charCodeAt(a))>55295&&r<57344){if(!i){if(r>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(a+1===n){(t-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(t-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((t-=1)<0)break;o.push(r)}else if(r<2048){if((t-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function Rt(e){return Ye.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(Lt,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function Nt(e,t,r,n){for(var i=0;i<n&&!(i+r>=t.length||i>=e.length);++i)t[i+r]=e[i];return i}function Pt(e){return e instanceof ArrayBuffer||null!=e&&null!=e.constructor&&"ArrayBuffer"===e.constructor.name&&"number"==typeof e.byteLength}function It(e){return e!=e}var Ft={},Ut=tt.Buffer;function Dt(e,t){for(var r in e)t[r]=e[r]}function qt(e,t,r){return Ut(e,t,r)}Ut.from&&Ut.alloc&&Ut.allocUnsafe&&Ut.allocUnsafeSlow?Ft=tt:(Dt(tt,Ft),Ft.Buffer=qt),Dt(Ut,qt),qt.from=function(e,t,r){if("number"==typeof e)throw new TypeError("Argument must not be a number");return Ut(e,t,r)},qt.alloc=function(e,t,r){if("number"!=typeof e)throw new TypeError("Argument must be a number");var n=Ut(e);return void 0!==t?"string"==typeof r?n.fill(t,r):n.fill(t):n.fill(0),n},qt.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return Ut(e)},qt.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return tt.SlowBuffer(e)};var zt={},Wt=Ft.Buffer;function Gt(e,t){e.emit("error",t)}zt=function(){function e(){!function(t,r){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this),this.head=null,this.tail=null,this.length=0}return e.prototype.push=function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length},e.prototype.unshift=function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length},e.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},e.prototype.clear=function(){this.head=this.tail=null,this.length=0},e.prototype.join=function(e){if(0===this.length)return"";for(var t=this.head,r=""+t.data;t=t.next;)r+=e+t.data;return r},e.prototype.concat=function(e){if(0===this.length)return Wt.alloc(0);if(1===this.length)return this.head.data;for(var t,r,n=Wt.allocUnsafe(e>>>0),i=this.head,o=0;i;)t=n,r=o,i.data.copy(t,r),o+=i.data.length,i=i.next;return n},e}(),We&&We.inspect&&We.inspect.custom&&(zt.prototype[We.inspect.custom]=function(){var e=We.inspect({length:this.length});return this.constructor.name+" "+e});var $t={destroy:function(e,t){var r=this,n=this._readableState&&this._readableState.destroyed,i=this._writableState&&this._writableState.destroyed;return n||i?(t?t(e):!e||this._writableState&&this._writableState.errorEmitted||ze.nextTick(Gt,this,e),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,function(e){!t&&e?(ze.nextTick(Gt,r,e),r._writableState&&(r._writableState.errorEmitted=!0)):t&&t(e)}),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}},Yt=ke.EventEmitter,Ht={},Jt=Ft.Buffer,Kt=Jt.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function Qt(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(Jt.isEncoding===Kt||!Kt(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=Xt,this.end=er,t=4;break;case"utf8":this.fillLast=Zt,t=4;break;case"base64":this.text=tr,this.end=rr,t=3;break;default:return this.write=nr,void(this.end=ir)}this.lastNeed=0,this.lastTotal=0,this.lastChar=Jt.allocUnsafe(t)}function Vt(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function Zt(e){var t=this.lastTotal-this.lastNeed,r=function(e,t,r){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==r?r:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function Xt(e,t){if((e.length-t)%2==0){var r=e.toString("utf16le",t);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function er(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,r)}return t}function tr(e,t){var r=(e.length-t)%3;return 0===r?e.toString("base64",t):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-r))}function rr(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function nr(e){return e.toString(this.encoding)}function ir(e){return e&&e.length?this.write(e):""}Ht.StringDecoder=Qt,Qt.prototype.write=function(e){if(0===e.length)return"";var t,r;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<e.length?t?t+this.text(e,r):this.text(e,r):t||""},Qt.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},Qt.prototype.text=function(e,t){var r=function(e,t,r){var n=t.length-1;if(n<r)return 0;var i=Vt(t[n]);return i>=0?(i>0&&(e.lastNeed=i-1),i):--n<r||-2===i?0:(i=Vt(t[n]))>=0?(i>0&&(e.lastNeed=i-2),i):--n<r||-2===i?0:(i=Vt(t[n]))>=0?(i>0&&(2===i?i=0:e.lastNeed=i-3),i):0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=r;var n=e.length-(r-this.lastNeed);return e.copy(this.lastChar,0,n),e.toString("utf8",t,n)},Qt.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length};var or={};(function(e){function t(t){try{if(!e.localStorage)return!1}catch(e){return!1}var r=e.localStorage[t];return null!=r&&"true"===String(r).toLowerCase()}or=function(e,r){if(t("noDeprecation"))return e;var n=!1;return function(){if(!n){if(t("throwDeprecation"))throw new Error(r);t("traceDeprecation")?console.trace(r):console.warn(r),n=!0}return e.apply(this,arguments)}}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});var ar=t({}),sr=ur,lr=t({});function ur(e){if(!(this instanceof ur))return new ur(e);lr.call(this,e),this._transformState={afterTransform:function(e,t){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(!n)return this.emit("error",new Error("write callback called multiple times"));r.writechunk=null,r.writecb=null,null!=t&&this.push(t),n(e);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",cr)}function cr(){var e=this;"function"==typeof this._flush?this._flush(function(t,r){fr(e,t,r)}):fr(this,null,null)}function fr(e,t,r){if(t)return e.emit("error",t);if(null!=r&&e.push(r),e._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(e._transformState.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}qe.inherits=Ue,qe.inherits(ur,lr),ur.prototype.push=function(e,t){return this._transformState.needTransform=!1,lr.prototype.push.call(this,e,t)},ur.prototype._transform=function(e,t,r){throw new Error("_transform() is not implemented")},ur.prototype._write=function(e,t,r){var n=this._transformState;if(n.writecb=r,n.writechunk=e,n.writeencoding=t,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},ur.prototype._read=function(e){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0},ur.prototype._destroy=function(e,t){var r=this;lr.prototype._destroy.call(this,e,function(e){t(e),r.emit("close")})};var hr=pr;function pr(e){if(!(this instanceof pr))return new pr(e);sr.call(this,e)}qe.inherits=Ue,qe.inherits(pr,sr),pr.prototype._transform=function(e,t,r){r(null,e)};var dr={};(dr=dr=i({})).Stream=dr,dr.Readable=dr,dr.Writable=r({}),dr.Duplex=t({}),dr.Transform=sr,dr.PassThrough=hr;var gr=dr.PassThrough,yr=dr.Transform,br=r({}),vr=wr,mr=ke.EventEmitter;function wr(){mr.call(this)}Ue(wr,mr),wr.Readable=dr,wr.Writable=br,wr.Duplex=ar,wr.Transform=yr,wr.PassThrough=gr,wr.Stream=wr,wr.prototype.pipe=function(e,t){var r=this;function n(t){e.writable&&!1===e.write(t)&&r.pause&&r.pause()}function i(){r.readable&&r.resume&&r.resume()}r.on("data",n),e.on("drain",i),e._isStdio||t&&!1===t.end||(r.on("end",a),r.on("close",s));var o=!1;function a(){o||(o=!0,e.end())}function s(){o||(o=!0,"function"==typeof e.destroy&&e.destroy())}function l(e){if(u(),0===mr.listenerCount(this,"error"))throw e}function u(){r.removeListener("data",n),e.removeListener("drain",i),r.removeListener("end",a),r.removeListener("close",s),r.removeListener("error",l),e.removeListener("error",l),r.removeListener("end",u),r.removeListener("close",u),e.removeListener("close",u)}return r.on("error",l),e.on("error",l),r.on("end",u),r.on("close",u),e.on("close",u),e.emit("pipe",r),e};var _r={};(function(e){var t=vr.Stream;_r=function(r){return{ReadStream:function n(i,o){if(!(this instanceof n))return new n(i,o);t.call(this);var a=this;this.path=i,this.fd=null,this.readable=!0,this.paused=!1,this.flags="r",this.mode=438,this.bufferSize=65536,o=o||{};for(var s=Object.keys(o),l=0,u=s.length;l<u;l++){var c=s[l];this[c]=o[c]}if(this.encoding&&this.setEncoding(this.encoding),void 0!==this.start){if("number"!=typeof this.start)throw TypeError("start must be a Number");if(void 0===this.end)this.end=1/0;else if("number"!=typeof this.end)throw TypeError("end must be a Number");if(this.start>this.end)throw new Error("start must be <= end");this.pos=this.start}null===this.fd?r.open(this.path,this.flags,this.mode,function(e,t){if(e)return a.emit("error",e),void(a.readable=!1);a.fd=t,a.emit("open",t),a._read()}):e.nextTick(function(){a._read()})},WriteStream:function e(n,i){if(!(this instanceof e))return new e(n,i);t.call(this),this.path=n,this.fd=null,this.writable=!0,this.flags="w",this.encoding="binary",this.mode=438,this.bytesWritten=0,i=i||{};for(var o=Object.keys(i),a=0,s=o.length;a<s;a++){var l=o[a];this[l]=i[l]}if(void 0!==this.start){if("number"!=typeof this.start)throw TypeError("start must be a Number");if(this.start<0)throw new Error("start must be >= zero");this.pos=this.start}this.busy=!1,this._queue=[],null===this.fd&&(this._open=r.open,this._queue.push([this._open,this.path,this.flags,this.mode,void 0]),this.flush())}}}}).call(this,Z);var Sr={O_WRONLY:1,O_SYMLINK:2097152},Er={};(function(e){var t=e.cwd,r=null,n=e.env.GRACEFUL_FS_PLATFORM||e.platform;e.cwd=function(){return r||(r=t.call(e)),r};try{e.cwd()}catch(e){}var i=e.chdir;function o(e){return e?function(t,r,n){return e.call(Ee,t,r,function(e){f(e)&&(e=null),n&&n.apply(this,arguments)})}:e}function a(e){return e?function(t,r){try{return e.call(Ee,t,r)}catch(e){if(!f(e))throw e}}:e}function s(e){return e?function(t,r,n,i){return e.call(Ee,t,r,n,function(e){f(e)&&(e=null),i&&i.apply(this,arguments)})}:e}function l(e){return e?function(t,r,n){try{return e.call(Ee,t,r,n)}catch(e){if(!f(e))throw e}}:e}function u(e){return e?function(t,r){return e.call(Ee,t,function(e,t){if(!t)return r.apply(this,arguments);t.uid<0&&(t.uid+=4294967296),t.gid<0&&(t.gid+=4294967296),r&&r.apply(this,arguments)})}:e}function c(e){return e?function(t){var r=e.call(Ee,t);return r.uid<0&&(r.uid+=4294967296),r.gid<0&&(r.gid+=4294967296),r}:e}function f(t){return!t||"ENOSYS"===t.code||!(e.getuid&&0===e.getuid()||"EINVAL"!==t.code&&"EPERM"!==t.code)}e.chdir=function(t){r=null,i.call(e,t)},Er=function(t){var r,i,f;Sr.hasOwnProperty("O_SYMLINK")&&e.version.match(/^v0\.6\.[0-2]|^v0\.5\./)&&function(e){e.lchmod=function(t,r,n){e.open(t,Sr.O_WRONLY|Sr.O_SYMLINK,r,function(t,i){t?n&&n(t):e.fchmod(i,r,function(t){e.close(i,function(e){n&&n(t||e)})})})},e.lchmodSync=function(t,r){var n,i=e.openSync(t,Sr.O_WRONLY|Sr.O_SYMLINK,r),o=!0;try{n=e.fchmodSync(i,r),o=!1}finally{if(o)try{e.closeSync(i)}catch(e){}else e.closeSync(i)}return n}}(t),t.lutimes||function(t){Sr.hasOwnProperty("O_SYMLINK")?(t.lutimes=function(e,r,n,i){t.open(e,Sr.O_SYMLINK,function(e,o){e?i&&i(e):t.futimes(o,r,n,function(e){t.close(o,function(t){i&&i(e||t)})})})},t.lutimesSync=function(e,r,n){var i,o=t.openSync(e,Sr.O_SYMLINK),a=!0;try{i=t.futimesSync(o,r,n),a=!1}finally{if(a)try{t.closeSync(o)}catch(e){}else t.closeSync(o)}return i}):(t.lutimes=function(t,r,n,i){i&&e.nextTick(i)},t.lutimesSync=function(){})}(t),t.chown=s(t.chown),t.fchown=s(t.fchown),t.lchown=s(t.lchown),t.chmod=o(t.chmod),t.fchmod=o(t.fchmod),t.lchmod=o(t.lchmod),t.chownSync=l(t.chownSync),t.fchownSync=l(t.fchownSync),t.lchownSync=l(t.lchownSync),t.chmodSync=a(t.chmodSync),t.fchmodSync=a(t.fchmodSync),t.lchmodSync=a(t.lchmodSync),t.stat=u(t.stat),t.fstat=u(t.fstat),t.lstat=u(t.lstat),t.statSync=c(t.statSync),t.fstatSync=c(t.fstatSync),t.lstatSync=c(t.lstatSync),t.lchmod||(t.lchmod=function(t,r,n){n&&e.nextTick(n)},t.lchmodSync=function(){}),t.lchown||(t.lchown=function(t,r,n,i){i&&e.nextTick(i)},t.lchownSync=function(){}),"win32"===n&&(t.rename=(r=t.rename,function(e,n,i){var o=Date.now(),a=0;r(e,n,function s(l){if(l&&("EACCES"===l.code||"EPERM"===l.code)&&Date.now()-o<6e4)return setTimeout(function(){t.stat(n,function(t,o){t&&"ENOENT"===t.code?r(e,n,s):i(l)})},a),void(a<100&&(a+=10));i&&i(l)})})),t.read=(f=t.read,function(e,r,n,i,o,a){var s;if(a&&"function"==typeof a){var l=0;s=function(u,c,h){if(u&&"EAGAIN"===u.code&&l<10)return l++,f.call(t,e,r,n,i,o,s);a.apply(this,arguments)}}return f.call(t,e,r,n,i,o,s)}),t.readSync=(i=t.readSync,function(e,r,n,o,a){for(var s=0;;)try{return i.call(t,e,r,n,o,a)}catch(e){if("EAGAIN"===e.code&&s<10){s++;continue}throw e}})}}).call(this,Z);var kr=function(e){return e&&"object"==typeof e&&"function"==typeof e.copy&&"function"==typeof e.fill&&"function"==typeof e.readUInt8},xr={};(function(e,t){var r=/%[sdj%]/g;xr.format=function(e){if(!g(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(o(arguments[n]));return t.join(" ")}n=1;for(var i=arguments,a=i.length,s=String(e).replace(r,function(e){if("%%"===e)return"%";if(n>=a)return e;switch(e){case"%s":return String(i[n++]);case"%d":return Number(i[n++]);case"%j":try{return JSON.stringify(i[n++])}catch(e){return"[Circular]"}default:return e}}),l=i[n];n<a;l=i[++n])p(l)||!v(l)?s+=" "+l:s+=" "+o(l);return s},xr.deprecate=function(r,n){if(y(t.process))return function(){return xr.deprecate(r,n).apply(this,arguments)};if(!0===e.noDeprecation)return r;var i=!1;return function(){if(!i){if(e.throwDeprecation)throw new Error(n);e.traceDeprecation?console.trace(n):console.error(n),i=!0}return r.apply(this,arguments)}};var n,i={};function o(e,t){var r={seen:[],stylize:s};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),h(t)?r.showHidden=t:t&&xr._extend(r,t),y(r.showHidden)&&(r.showHidden=!1),y(r.depth)&&(r.depth=2),y(r.colors)&&(r.colors=!1),y(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=a),l(r,e,r.depth)}function a(e,t){var r=o.styles[t];return r?"["+o.colors[r][0]+"m"+e+"["+o.colors[r][1]+"m":e}function s(e,t){return e}function l(e,t,r){if(e.customInspect&&t&&_(t.inspect)&&t.inspect!==xr.inspect&&(!t.constructor||t.constructor.prototype!==t)){var n=t.inspect(r,e);return g(n)||(n=l(e,n,r)),n}var i=function(e,t){if(y(t))return e.stylize("undefined","undefined");if(g(t)){var r="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(r,"string")}return d(t)?e.stylize(""+t,"number"):h(t)?e.stylize(""+t,"boolean"):p(t)?e.stylize("null","null"):void 0}(e,t);if(i)return i;var o,a=Object.keys(t),s=(o={},a.forEach(function(e,t){o[e]=!0}),o);if(e.showHidden&&(a=Object.getOwnPropertyNames(t)),w(t)&&(a.indexOf("message")>=0||a.indexOf("description")>=0))return u(t);if(0===a.length){if(_(t)){var v=t.name?": "+t.name:"";return e.stylize("[Function"+v+"]","special")}if(b(t))return e.stylize(RegExp.prototype.toString.call(t),"regexp");if(m(t))return e.stylize(Date.prototype.toString.call(t),"date");if(w(t))return u(t)}var S,E="",k=!1,O=["{","}"];return f(t)&&(k=!0,O=["[","]"]),_(t)&&(E=" [Function"+(t.name?": "+t.name:"")+"]"),b(t)&&(E=" "+RegExp.prototype.toString.call(t)),m(t)&&(E=" "+Date.prototype.toUTCString.call(t)),w(t)&&(E=" "+u(t)),0!==a.length||k&&0!=t.length?r<0?b(t)?e.stylize(RegExp.prototype.toString.call(t),"regexp"):e.stylize("[Object]","special"):(e.seen.push(t),S=k?function(e,t,r,n,i){for(var o=[],a=0,s=t.length;a<s;++a)x(t,String(a))?o.push(c(e,t,r,n,String(a),!0)):o.push("");return i.forEach(function(i){i.match(/^\d+$/)||o.push(c(e,t,r,n,i,!0))}),o}(e,t,r,s,a):a.map(function(n){return c(e,t,r,s,n,k)}),e.seen.pop(),function(e,t,r){return e.reduce(function(e,t){return t.indexOf("\n"),e+t.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60?r[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+r[1]:r[0]+t+" "+e.join(", ")+" "+r[1]}(S,E,O)):O[0]+E+O[1]}function u(e){return"["+Error.prototype.toString.call(e)+"]"}function c(e,t,r,n,i,o){var a,s,u;if((u=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]}).get?s=u.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):u.set&&(s=e.stylize("[Setter]","special")),x(n,i)||(a="["+i+"]"),s||(e.seen.indexOf(u.value)<0?(s=p(r)?l(e,u.value,null):l(e,u.value,r-1)).indexOf("\n")>-1&&(s=o?s.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+s.split("\n").map(function(e){return"   "+e}).join("\n")):s=e.stylize("[Circular]","special")),y(a)){if(o&&i.match(/^\d+$/))return s;(a=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.substr(1,a.length-2),a=e.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),a=e.stylize(a,"string"))}return a+": "+s}function f(e){return Array.isArray(e)}function h(e){return"boolean"==typeof e}function p(e){return null===e}function d(e){return"number"==typeof e}function g(e){return"string"==typeof e}function y(e){return void 0===e}function b(e){return v(e)&&"[object RegExp]"===S(e)}function v(e){return"object"==typeof e&&null!==e}function m(e){return v(e)&&"[object Date]"===S(e)}function w(e){return v(e)&&("[object Error]"===S(e)||e instanceof Error)}function _(e){return"function"==typeof e}function S(e){return Object.prototype.toString.call(e)}function E(e){return e<10?"0"+e.toString(10):e.toString(10)}xr.debuglog=function(t){if(y(n)&&(n=e.env.NODE_DEBUG||""),t=t.toUpperCase(),!i[t])if(new RegExp("\\b"+t+"\\b","i").test(n)){var r=e.pid;i[t]=function(){var e=xr.format.apply(xr,arguments);console.error("%s %d: %s",t,r,e)}}else i[t]=function(){};return i[t]},xr.inspect=o,o.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},o.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},xr.isArray=f,xr.isBoolean=h,xr.isNull=p,xr.isNullOrUndefined=function(e){return null==e},xr.isNumber=d,xr.isString=g,xr.isSymbol=function(e){return"symbol"==typeof e},xr.isUndefined=y,xr.isRegExp=b,xr.isObject=v,xr.isDate=m,xr.isError=w,xr.isFunction=_,xr.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},xr.isBuffer=kr;var k=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function x(e,t){return Object.prototype.hasOwnProperty.call(e,t)}xr.log=function(){var e,t;console.log("%s - %s",(t=[E((e=new Date).getHours()),E(e.getMinutes()),E(e.getSeconds())].join(":"),[e.getDate(),k[e.getMonth()],t].join(" ")),xr.format.apply(xr,arguments))},xr.inherits=Ue,xr._extend=function(e,t){if(!t||!v(t))return e;for(var r=Object.keys(t),n=r.length;n--;)e[r[n]]=t[r[n]];return e}}).call(this,Z,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});var Or={};(function(e){var t,r,n=[],i=function(){};function o(t){Er(t),t.gracefulify=o,t.FileReadStream=p,t.FileWriteStream=d,t.ReadStream=p,t.WriteStream=d,t.createReadStream=function(e,t){return new p(e,t)},t.createWriteStream=function(e,t){return new d(e,t)};var r=t.readFile;t.readFile=function(e,t,n){return"function"==typeof t&&(n=t,t=null),function e(t,n,i){return r(t,n,function(r){!r||"EMFILE"!==r.code&&"ENFILE"!==r.code?("function"==typeof i&&i.apply(this,arguments),s()):a([e,[t,n,i]])})}(e,t,n)};var n=t.writeFile;t.writeFile=function(e,t,r,i){return"function"==typeof r&&(i=r,r=null),function e(t,r,i,o){return n(t,r,i,function(n){!n||"EMFILE"!==n.code&&"ENFILE"!==n.code?("function"==typeof o&&o.apply(this,arguments),s()):a([e,[t,r,i,o]])})}(e,t,r,i)};var i=t.appendFile;i&&(t.appendFile=function(e,t,r,n){return"function"==typeof r&&(n=r,r=null),function e(t,r,n,o){return i(t,r,n,function(i){!i||"EMFILE"!==i.code&&"ENFILE"!==i.code?("function"==typeof o&&o.apply(this,arguments),s()):a([e,[t,r,n,o]])})}(e,t,r,n)});var l=t.readdir;function u(e){return l.apply(t,e)}if(t.readdir=function(e,t,r){var n=[e];return"function"!=typeof t?n.push(t):r=t,n.push(function(e,t){t&&t.sort&&t.sort(),!e||"EMFILE"!==e.code&&"ENFILE"!==e.code?("function"==typeof r&&r.apply(this,arguments),s()):a([u,[n]])}),u(n)},"v0.8"===e.version.substr(0,4)){var c=_r(t);p=c.ReadStream,d=c.WriteStream}var f=t.ReadStream;p.prototype=Object.create(f.prototype),p.prototype.open=function(){var e=this;y(e.path,e.flags,e.mode,function(t,r){t?(e.autoClose&&e.destroy(),e.emit("error",t)):(e.fd=r,e.emit("open",r),e.read())})};var h=t.WriteStream;function p(e,t){return this instanceof p?(f.apply(this,arguments),this):p.apply(Object.create(p.prototype),arguments)}function d(e,t){return this instanceof d?(h.apply(this,arguments),this):d.apply(Object.create(d.prototype),arguments)}d.prototype=Object.create(h.prototype),d.prototype.open=function(){var e=this;y(e.path,e.flags,e.mode,function(t,r){t?(e.destroy(),e.emit("error",t)):(e.fd=r,e.emit("open",r))})},t.ReadStream=p,t.WriteStream=d;var g=t.open;function y(e,t,r,n){return"function"==typeof r&&(n=r,r=null),function e(t,r,n,i){return g(t,r,n,function(o,l){!o||"EMFILE"!==o.code&&"ENFILE"!==o.code?("function"==typeof i&&i.apply(this,arguments),s()):a([e,[t,r,n,i]])})}(e,t,r,n)}return t.open=y,t}function a(e){i("ENQUEUE",e[0].name,e[1]),n.push(e)}function s(){var e=n.shift();e&&(i("RETRY",e[0].name,e[1]),e[0].apply(null,e[1]))}xr.debuglog?i=xr.debuglog("gfs4"):/\bgfs4\b/i.test(e.env.NODE_DEBUG||"")&&(i=function(){var e=xr.format.apply(xr,arguments);e="GFS4: "+e.split(/\n/).join("\nGFS4: "),console.error(e)}),/\bgfs4\b/i.test(e.env.NODE_DEBUG||"")&&e.on("exit",function(){i(n),Se.equal(n.length,0)}),Or=o(Ee),e.env.TEST_GRACEFUL_FS_GLOBAL_PATCH&&(Or=o(be)),Or.close=be.close=(t=be.close,function(e,r){return t.call(be,e,function(e){e||s(),"function"==typeof r&&r.apply(this,arguments)})}),Or.closeSync=be.closeSync=(r=be.closeSync,function(e){var t=r.apply(be,arguments);return s(),t})}).call(this,Z);var jr={},Ar=function(e,t){e&&e.constructor===String||(t=e||{},e=Error.name);var r=function n(i){if(!this)return new n(i);i=i instanceof Error?i.message:i||this.message,Error.call(this,i),Error.captureStackTrace(this,r),this.name=e,Object.defineProperty(this,"message",{configurable:!0,enumerable:!1,get:function(){var e,r=i.split(/\r?\n/g);for(var n in t)if(t.hasOwnProperty(n)){var o=t[n];"message"in o&&((e=r=o.message(this[n],r)||r)&&(e instanceof Array||Array.isArray(e)||e.length>=0&&e.splice instanceof Function)||(r=[r]))}return r.join("\n")},set:function(e){i=e}});var o=null,a=Object.getOwnPropertyDescriptor(this,"stack"),s=a.get,l=a.value;delete a.value,delete a.writable,a.set=function(e){o=e},a.get=function(){var e=(o||(s?s.call(this):l)).split(/\r?\n+/g);o||(e[0]=this.name+": "+this.message);var r=1;for(var n in t)if(t.hasOwnProperty(n)){var i=t[n];if("line"in i){var a=i.line(this[n]);a&&e.splice(r++,0,"    "+a)}"stack"in i&&i.stack(this[n],e)}return e.join("\n")},Object.defineProperty(this,"stack",a)};return Object.setPrototypeOf?(Object.setPrototypeOf(r.prototype,Error.prototype),Object.setPrototypeOf(r,Error)):xr.inherits(r,Error),r};Ar.append=function(e,t){return{message:function(r,n){return(r=r||t)&&(n[0]+=" "+e.replace("%s",r.toString())),n}}},Ar.line=function(e,t){return{line:function(r){return(r=r||t)?e.replace("%s",r.toString()):null}}};const Mr=(jr=Ar)("JSONError",{fileName:jr.append("in %s")});const Cr=(e,t)=>(function(){const r=t.promiseModule,n=new Array(arguments.length);for(let e=0;e<arguments.length;e++)n[e]=arguments[e];return new r((r,i)=>{t.errorFirst?n.push(function(e,n){if(t.multiArgs){const t=new Array(arguments.length-1);for(let e=1;e<arguments.length;e++)t[e-1]=arguments[e];e?(t.unshift(e),i(t)):r(t)}else e?i(e):r(n)}):n.push(function(e){if(t.multiArgs){const e=new Array(arguments.length-1);for(let t=0;t<arguments.length;t++)e[t]=arguments[t];r(e)}else r(e)}),e.apply(this,n)})});var Tr=(e,t)=>{t=Object.assign({exclude:[/.+(Sync|Stream)$/],errorFirst:!0,promiseModule:Promise},t);const r=e=>{const r=t=>"string"==typeof t?e===t:t.test(e);return t.include?t.include.some(r):!t.exclude.some(r)};let n;n="function"==typeof e?function(){return t.excludeMain?e.apply(this,arguments):Cr(e,t).apply(this,arguments)}:Object.create(Object.getPrototypeOf(e));for(const i in e){const o=e[i];n[i]="function"==typeof o&&r(i)?Cr(o,t):o}return n},Lr={};(function(e){"use strict";const t=(t,r,n={})=>(t=(e=>{if("string"!=typeof e)throw new TypeError("Expected a string, got "+typeof e);return 65279===e.charCodeAt(0)?e.slice(1):e})(t),"function"==typeof n.beforeParse&&(t=n.beforeParse(t)),((e,t,r)=>{"string"==typeof t&&(r=t,t=null);try{try{return JSON.parse(e,t)}catch(r){throw function(e,t,r){r=r||20;try{JSON.parse(e,t)}catch(t){if("string"!=typeof e){const t="Cannot parse "+(Array.isArray(e)&&0===e.length?"an empty array":String(e));throw new TypeError(t)}const n=t.message.match(/^Unexpected token.*position\s+(\d+)/i),i=n?+n[1]:t.message.match(/^Unexpected end of JSON.*/i)?e.length-1:null;if(null!=i){const n=i<=r?0:i-r,o=i+r>=e.length?e.length:i+r;t.message+=` while parsing near '${0===n?"":"..."}${e.slice(n,o)}${o===e.length?"":"..."}'`}else t.message+=` while parsing '${e.slice(0,2*r)}'`;throw t}}(e,t),r}}catch(e){e.message=e.message.replace(/\n/g,"");const t=new Mr(e);throw r&&(t.fileName=r),t}})(t,n.reviver,pe.relative(e.cwd(),r)));(Lr=((e,r)=>Tr(Or.readFile)(e,"utf8").then(n=>t(n,e,r)))).sync=((e,r)=>t(Or.readFileSync(e,"utf8"),e,r))}).call(this,Z);var Br={};const Rr=new WeakMap,Nr=e=>pe.resolve(pe.dirname(e),".."),Pr=(e,t)=>(Rr.set(e,t),e),Ir=(e,t)=>e?ve("package.json",(t=t||{}).cwd?{cwd:t.cwd}:{}).then(r=>r?Lr(r).then(n=>{if(t.skipOnFalse&&!1===n[e]){const n=Object.assign({},t,{cwd:Nr(r)});return Ir(e,n)}return Pr(Object.assign({},t.defaults,n[e]),r)}):Pr(Object.assign({},t.defaults),r)):Promise.reject(new TypeError("Expected a namespace")),Fr=(e,t)=>{if(!e)throw new TypeError("Expected a namespace");const r=ve.sync("package.json",(t=t||{}).cwd?{cwd:t.cwd}:{});if(!r)return Pr(Object.assign({},t.defaults),r);const n=Lr.sync(r);if(t.skipOnFalse&&!1===n[e]){const n=Object.assign({},t,{cwd:Nr(r)});return Fr(e,n)}return Pr(Object.assign({},t.defaults,n[e]),r)};(Br=Ir).filepath=(e=>Rr.get(e)),Br.sync=Fr;var Ur={coloredInterpolation:!1,displayScope:!0,displayBadge:!0,displayDate:!1,displayFilename:!1,displayLabel:!0,displayTimestamp:!1,underlineLabel:!0,underlineMessage:!1,underlinePrefix:!1,underlineSuffix:!1,uppercaseLabel:!1},Dr={error:{badge:he.cross,color:"red",label:"error"},fatal:{badge:he.cross,color:"red",label:"fatal"},fav:{badge:he("❤"),color:"magenta",label:"favorite"},info:{badge:he.info,color:"blue",label:"info"},star:{badge:he.star,color:"yellow",label:"star"},success:{badge:he.tick,color:"green",label:"success"},warn:{badge:he.warning,color:"yellow",label:"warning"},complete:{badge:he.checkboxOn,color:"cyan",label:"complete"},pending:{badge:he.checkboxOff,color:"magenta",label:"pending"},note:{badge:he.bullet,color:"blue",label:"note"},start:{badge:he.play,color:"green",label:"start"},pause:{badge:he.squareSmallFilled,color:"yellow",label:"pause"},debug:{badge:he("⬤"),color:"red",label:"debug"},await:{badge:he.ellipsis,color:"blue",label:"awaiting"},watch:{badge:he.ellipsis,color:"yellow",label:"watching"},log:{badge:"",color:"",label:""}},qr={};return function(e){"use strict";function t(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||r(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function r(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}var n="undefined"!=typeof window&&void 0!==window.document,i=!1,a=Ur,s=function(e){return Array.isArray(e)?e:[e]},l=function(){function l(){var t=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};for(var i in function(e,t){if(!(e instanceof l))throw new TypeError("Cannot call a class as a function")}(this),this._interactive=!n&&(r.interactive||!1),this._config=Object.assign(this.packageConfiguration,r.config),this._customTypes=Object.assign({},r.types),this._disabled=r.disabled||!1,this._scopeName=r.scope||"",this._timers=r.timers||new Map,this._types=this._mergeTypes(Dr,this._customTypes),this._stream=n?{write:console.log}:r.stream||e.stdout,this._longestLabel=Dr.start.label.length,Object.keys(this._types).forEach(function(e){t[e]=t._logger.bind(t,e)}),this._types)this._types[i].label&&this._types[i].label.length>this._longestLabel&&(this._longestLabel=this._types[i].label.length)}var u;return(u=[{key:"_mergeTypes",value:function(e,t){var r=Object.assign({},e);return Object.keys(t).forEach(function(e){r[e]=Object.assign({},r[e],t[e])}),r}},{key:"_formatStream",value:function(e){return s(e)}},{key:"_formatDate",value:function(){return`[${this.date}]`}},{key:"_formatFilename",value:function(){return`[${this.filename}]`}},{key:"_formatScopeName",value:function(){return Array.isArray(this._scopeName)?`${this._scopeName.filter(function(e){return 0!==e.length}).map(function(e){return`[${e.trim()}]`}).join(" ")}`:`[${this._scopeName}]`}},{key:"_formatTimestamp",value:function(){return`[${this.timestamp}]`}},{key:"_formatMessage",value:function(e,r){if(e=s(e),this._config.coloredInterpolation){var n=Object.assign({},xr.inspect.styles);return Object.keys(xr.inspect.styles).forEach(function(e){xr.inspect.styles[e]=r.color||n[e]}),e=xr.formatWithOptions.apply(xr,[{colors:!0}].concat(t(e))),xr.inspect.styles=Object.assign({},n),e}return xr.format.apply(xr,t(e))}},{key:"_meta",value:function(){var e=[];return this._config.displayDate&&e.push(this._formatDate()),this._config.displayTimestamp&&e.push(this._formatTimestamp()),this._config.displayFilename&&e.push(this._formatFilename()),0!==this._scopeName.length&&this._config.displayScope&&e.push(this._formatScopeName()),0!==e.length?(e.push(`${he.pointerSmall}`),e.map(function(e){return fe.grey(e)})):e}},{key:"_hasAdditional",value:function(e,t,r){var n=e.suffix,i=e.prefix;return n||i?"":this._formatMessage(t,r)}},{key:"_buildSignale",value:function(e){for(var t={},n={},i=arguments.length,o=new Array(i>1?i-1:0),a=1;a<i;a++)o[a-1]=arguments[a];if(1===o.length&&"object"==typeof o[0]&&null!==o[0])if(o[0]instanceof Error)t=o[0];else{var s=o[0],l=s.prefix,u=s.message,c=s.suffix;n=Object.assign({},{suffix:c,prefix:l}),t=u?this._formatMessage(u,e):this._hasAdditional(n,o,e)}else t=this._formatMessage(o,e);var f,h=this._meta();if(n.prefix&&(this._config.underlinePrefix?h.push(fe.underline(n.prefix)):h.push(n.prefix)),this._config.displayBadge&&e.badge&&h.push(fe[e.color](e.badge.padEnd(e.badge.length+1))),this._config.displayLabel&&e.label){var p=this._config.uppercaseLabel?e.label.toUpperCase():e.label;this._config.underlineLabel?h.push(fe[e.color].underline(p).padEnd(this._longestLabel+20)):h.push(fe[e.color](p.padEnd(this._longestLabel+1)))}if(t instanceof Error&&t.stack){var d=function(e){if(Array.isArray(e))return e}(f=t.stack.split("\n"))||r(f)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}(),g=d[0],y=d.slice(1);return this._config.underlineMessage?h.push(fe.underline(g)):h.push(g),h.push(fe.grey(y.map(function(e){return e.replace(/^/,"\n")}).join(""))),h.join(" ")}return this._config.underlineMessage?h.push(fe.underline(t)):h.push(t),n.suffix&&(this._config.underlineSuffix?h.push(fe.underline(n.suffix)):h.push(n.suffix)),h.join(" ")}},{key:"_write",value:function(e,r){if(n){var a=o.parse(r);e.write.apply(e,t(a.asChromeConsoleLogArguments))}else this._interactive&&i&&(e.moveCursor(0,-1),e.clearLine(),e.cursorTo(0)),e.write(r+"\n"),i=this._interactive}},{key:"_log",value:function(e){var t=this,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this._stream;this.isEnabled&&this._formatStream(r).forEach(function(r){t._write(r,e)})}},{key:"_logger",value:function(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];this._log(this._buildSignale.apply(this,[this._types[e]].concat(r)),this._types[e].stream)}},{key:"config",value:function(e){this.configuration=e}},{key:"disable",value:function(){this._disabled=!0}},{key:"enable",value:function(){this._disabled=!1}},{key:"scope",value:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];if(0===t.length)throw new Error("No scope name was defined.");return new l(Object.assign(this.currentOptions,{scope:t}))}},{key:"unscope",value:function(){this._scopeName=""}},{key:"time",value:function(e){e||(e=`timer_${this._timers.size}`),this._timers.set(e,Date.now());var t=this._meta(),r=[fe.green(this._types.start.badge.padEnd(2)),fe.green.underline(e).padEnd(this._longestLabel+20),"Initialized timer..."];return t.push.apply(t,r),this._log(t.join(" ")),e}},{key:"timeEnd",value:function(e){if(!e&&this._timers.size){var r=function(e){return e.includes("timer_")};e=t(this._timers.keys()).reduceRight(function(e,t){return r(e)?e:r(t)?t:null})}if(this._timers.has(e)){var n=(a=this._timers.get(e),Date.now()-a);this._timers.delete(e);var i=this._meta(),o=[fe.red(this._types.pause.badge.padEnd(2)),fe.red.underline(e).padEnd(this._longestLabel+20),"Timer run for:",fe.yellow(n<1e3?n+"ms":(n/1e3).toFixed(2)+"s")];return i.push.apply(i,o),this._log(i.join(" ")),{label:e,span:n}}var a}},{key:"scopeName",get:function(){return this._scopeName}},{key:"currentOptions",get:function(){return Object.assign({},{config:this._config,disabled:this._disabled,types:this._customTypes,interactive:this._interactive,timers:this._timers,stream:this._stream})}},{key:"isEnabled",get:function(){return!this._disabled}},{key:"date",get:function(){return(new Date).toLocaleDateString()}},{key:"timestamp",get:function(){return(new Date).toLocaleTimeString()}},{key:"filename",get:function(){var e=Error.prepareStackTrace;Error.prepareStackTrace=function(e,t){return t};var t=(new Error).stack;Error.prepareStackTrace=e;var r=t.map(function(e){return e.getFileName()}),n=r.find(function(e){return e!==r[0]});return n?pe.basename(n):"anonymous"}},{key:"packageConfiguration",get:function(){return Br.sync("signale",{defaults:a})}},{key:"configuration",set:function(e){this._config=Object.assign(this.packageConfiguration,e)}}])&&function(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}(l.prototype,u),l}();qr=l}.call(this,Z),qr});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,